{
    "pipes": [],
    "interfaces": [
        {
            "name": "Day",
            "id": "interface-Day-f2f364713148e4f2524070116198842b2352803ed4815a5570443bac33e0ebd522a2b4dbc36c5cbb493aacbbb26425f33857e92c6d68dea10ce8e1588bfc6101",
            "file": "projects/ngx-relic/src/lib/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type Color =\r\n  | 'primary'\r\n  | 'success'\r\n  | 'info'\r\n  | 'warning'\r\n  | 'danger'\r\n  | 'slate'\r\n  | 'neutral';\r\n\r\nexport type ButtonColor = 'primary' | 'danger' | 'success';\r\n\r\nexport type OnChangeSelectFn<T> = (options: T[]) => void;\r\nexport type OnChange = (value: any) => void;\r\nexport type OnTouched = () => void;\r\n\r\nexport type TagSize = 'small' | 'medium' | 'large';\r\n\r\nexport interface SelectOption extends Object {\r\n  selected?: boolean;\r\n}\r\n\r\nexport interface Day {\r\n  day: number;\r\n  name: string;\r\n}\r\n\r\ntype CellAlign = 'left' | 'center' | 'right';\r\n\r\nexport type HeaderStyles = {\r\n  title: string;\r\n  width?: string | number;\r\n  align?: CellAlign;\r\n};\r\n\r\nexport type TableOptions = {\r\n  columns: {\r\n    [key: string]: HeaderStyles;\r\n  };\r\n  body?: {\r\n    [key: string]: {\r\n      align?: CellAlign;\r\n    };\r\n  };\r\n};\r\n",
            "properties": [
                {
                    "name": "day",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Day",
            "id": "interface-Day-a5c2aa6d102b4ecd9e06914666eaf8340b42dbab36cad02fc4d1e015ecf5e8893efd3a7ba41eca08448093891af8f5e92181cc8b3e5b8a977f5ff17d55ebe1bb-1",
            "file": "projects/ngx-relic/src/lib/core/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type Color =\r\n  | 'primary'\r\n  | 'success'\r\n  | 'info'\r\n  | 'warning'\r\n  | 'danger'\r\n  | 'slate'\r\n  | 'neutral';\r\n\r\nexport type ButtonColor = 'primary' | 'danger' | 'success';\r\n\r\nexport type OnChangeSelectFn<T> = (options: T[]) => void;\r\nexport type OnChange = (value: any) => void;\r\nexport type OnTouched = () => void;\r\n\r\nexport interface SelectOption extends Object {\r\n  selected?: boolean;\r\n}\r\n\r\nexport interface Day {\r\n  day: number;\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "day",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Day-1"
        },
        {
            "name": "SelectOption",
            "id": "interface-SelectOption-f2f364713148e4f2524070116198842b2352803ed4815a5570443bac33e0ebd522a2b4dbc36c5cbb493aacbbb26425f33857e92c6d68dea10ce8e1588bfc6101",
            "file": "projects/ngx-relic/src/lib/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type Color =\r\n  | 'primary'\r\n  | 'success'\r\n  | 'info'\r\n  | 'warning'\r\n  | 'danger'\r\n  | 'slate'\r\n  | 'neutral';\r\n\r\nexport type ButtonColor = 'primary' | 'danger' | 'success';\r\n\r\nexport type OnChangeSelectFn<T> = (options: T[]) => void;\r\nexport type OnChange = (value: any) => void;\r\nexport type OnTouched = () => void;\r\n\r\nexport type TagSize = 'small' | 'medium' | 'large';\r\n\r\nexport interface SelectOption extends Object {\r\n  selected?: boolean;\r\n}\r\n\r\nexport interface Day {\r\n  day: number;\r\n  name: string;\r\n}\r\n\r\ntype CellAlign = 'left' | 'center' | 'right';\r\n\r\nexport type HeaderStyles = {\r\n  title: string;\r\n  width?: string | number;\r\n  align?: CellAlign;\r\n};\r\n\r\nexport type TableOptions = {\r\n  columns: {\r\n    [key: string]: HeaderStyles;\r\n  };\r\n  body?: {\r\n    [key: string]: {\r\n      align?: CellAlign;\r\n    };\r\n  };\r\n};\r\n",
            "properties": [
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Object"
            ]
        },
        {
            "name": "SelectOption",
            "id": "interface-SelectOption-a5c2aa6d102b4ecd9e06914666eaf8340b42dbab36cad02fc4d1e015ecf5e8893efd3a7ba41eca08448093891af8f5e92181cc8b3e5b8a977f5ff17d55ebe1bb-1",
            "file": "projects/ngx-relic/src/lib/core/types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type Color =\r\n  | 'primary'\r\n  | 'success'\r\n  | 'info'\r\n  | 'warning'\r\n  | 'danger'\r\n  | 'slate'\r\n  | 'neutral';\r\n\r\nexport type ButtonColor = 'primary' | 'danger' | 'success';\r\n\r\nexport type OnChangeSelectFn<T> = (options: T[]) => void;\r\nexport type OnChange = (value: any) => void;\r\nexport type OnTouched = () => void;\r\n\r\nexport interface SelectOption extends Object {\r\n  selected?: boolean;\r\n}\r\n\r\nexport interface Day {\r\n  day: number;\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "Object"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SelectOption-1"
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "CvaDirective",
            "id": "directive-CvaDirective-21a9e9235bf70fdc7c6d003b0a5704981dfb3c56259e34edfc7b3920062acb3df4257e2f0c159959a63456fdc962ff1d07ca537740f42e0afc762a53436558c5",
            "file": "projects/ngx-relic/src/lib/core/cva.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  Directive,\n  Injector,\n  OnDestroy,\n  OnInit,\n  forwardRef,\n  inject,\n} from '@angular/core';\nimport { OnChange, OnTouched } from '../types';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  FormControlDirective,\n  FormControlName,\n  FormGroupDirective,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n  NgModel,\n} from '@angular/forms';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\n@Directive({\n  selector: '[ngxCva]',\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: forwardRef(() => CvaDirective),\n    },\n  ],\n})\nexport class CvaDirective implements ControlValueAccessor, OnInit, OnDestroy {\n  onChange!: OnChange;\n  onTouched!: OnTouched;\n  control!: FormControl;\n  destroy = new Subject();\n  private _internalValue: any;\n  _disabled = false;\n  private injector = inject(Injector);\n\n  constructor() {}\n\n  get hasErrors() {\n    return this.control.errors && this.control.touched;\n  }\n\n  ngOnInit(): void {\n    const injectedControl = this.injector.get(NgControl);\n\n    switch (injectedControl.constructor) {\n      case NgModel: {\n        const { control, update } = injectedControl as NgModel;\n\n        this.control = control;\n\n        this.control.valueChanges\n          .pipe(\n            tap((value) => update.emit(value)),\n            takeUntil(this.destroy),\n          )\n          .subscribe();\n        break;\n      }\n      case FormControlName: {\n        this.control = this.injector\n          .get(FormGroupDirective)\n          .getControl(injectedControl as FormControlName);\n        break;\n      }\n      default: {\n        this.control = (injectedControl as FormControlDirective)\n          .form as FormControl;\n        break;\n      }\n    }\n\n    this._disabled = this.control.status === 'DISABLED';\n  }\n\n  ngOnDestroy() {\n    this.destroy.next(true);\n    this.destroy.complete();\n  }\n\n  writeValue(value: any): void {\n    if (value) this._internalValue = value;\n  }\n  registerOnChange(fn: OnChange): void {\n    this.onChange = fn;\n  }\n  registerOnTouched(fn: OnTouched): void {\n    this.onTouched = fn;\n  }\n  setDisabledState?(isDisabled: boolean): void {\n    this._disabled = isDisabled;\n  }\n}\n",
            "selector": "[ngxCva]",
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, multi: true, useExisting: forwardRef(() => CvaDirective),\n}",
                    "type": "directive"
                }
            ],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "destroy",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OnChange",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "onTouched",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OnTouched",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "OnChange",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "OnChange",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "OnTouched",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "OnTouched",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "OnInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 40
            },
            "accessors": {
                "hasErrors": {
                    "name": "hasErrors",
                    "getSignature": {
                        "name": "hasErrors",
                        "type": "",
                        "returnType": "",
                        "line": 44
                    }
                }
            }
        },
        {
            "name": "HiddenDirective",
            "id": "directive-HiddenDirective-2672ec29de762796e36bf5b1e345037ab904bd7a322341b032541b21ff349a9a295f0616b0f7535d2a0affd8668962e7bf4e5b5b7f6b55c3c316a01824b3bd72",
            "file": "projects/ngx-relic/src/lib/core/hidden.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, HostBinding, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appHidden]',\r\n})\r\nexport class HiddenDirective {\r\n  @Input('appHidden') isHidden = false;\r\n\r\n  @HostBinding('style.display')\r\n  get displayStyle() {\r\n    return this.isHidden ? 'none' : undefined;\r\n  }\r\n}\r\n",
            "selector": "[appHidden]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "appHidden",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "style.display",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [],
            "extends": [],
            "accessors": {
                "displayStyle": {
                    "name": "displayStyle",
                    "getSignature": {
                        "name": "displayStyle",
                        "type": "",
                        "returnType": "",
                        "line": 10
                    }
                }
            }
        },
        {
            "name": "TableRowDirective",
            "id": "directive-TableRowDirective-d6fb02b07cc874362279a7afe6641adea5924a5f82386788a177eea98b8b8afea1205c56acd8355a4adb62a9f9da28a250be99e131ace82af815ed0f8ae3cfa4",
            "file": "projects/ngx-relic/src/lib/table/table-row.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, TemplateRef, inject } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'ng-template[appTableRow]',\r\n})\r\nexport class TableRowDirective {\r\n  @Input() appTableRow = '';\r\n  element = inject(TemplateRef);\r\n}\r\n",
            "selector": "ng-template[appTableRow]",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [
                {
                    "name": "appTableRow",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 7,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "defaultValue": "inject(TemplateRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methodsClass": [],
            "extends": []
        }
    ],
    "components": [
        {
            "name": "BaseInputComponent",
            "id": "component-BaseInputComponent-65030928a564999f55fa7e88e13901bcf2ca03ad95e165d700e4210426f3d11c2cb6ce59cd7d5547d9192462fbcab0edc8804a818b97c25367fc47a75021baaf",
            "file": "projects/ngx-relic/src/lib/base-input/base-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-base-input",
            "styleUrls": [
                "./base-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./base-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "hasErrors",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helperText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'ngx-base-input',\n  templateUrl: './base-input.component.html',\n  styleUrls: ['./base-input.component.scss'],\n})\nexport class BaseInputComponent {\n  @Input()\n  label = '';\n\n  @Input()\n  placeholder = '';\n\n  @Input()\n  errorText = '';\n\n  @Input()\n  helperText = '';\n\n  @Input()\n  required = false;\n\n  @Input()\n  disabled = false;\n\n  @Input()\n  hasErrors = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./base-input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"ngx-base-input ngx-input\">\n  <ngx-label [disabled]=\"disabled\" [required]=\"required\">{{ label }}</ngx-label>\n  <div\n    [ngClass]=\"{\n      'ngx-base-input__inner--error': hasErrors && !disabled,\n      'ngx-base-input__inner--disabled': disabled\n    }\"\n    class=\"ngx-base-input__inner\"\n  >\n    <ng-content></ng-content>\n  </div>\n  <span *ngIf=\"hasErrors && !disabled\" class=\"helper-text helper-text--error\">{{\n    errorText\n  }}</span>\n  <span *ngIf=\"helperText !== '' && !hasErrors\" class=\"helper-text\">{{\n    helperText\n  }}</span>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-7192ed3b0e1e2e2746df9d3d5138ef56c576654d3e0620c4df36765d25db1a052cd7034a5d2a87c536779c3ae5426dc5a2245d2fd7bd3c4964e3c04ea813a8dc",
            "file": "projects/ngx-relic/src/lib/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "ButtonColor",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisable button functionality\n",
                    "description": "<p>Disable button functionality</p>\n",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 383,
                            "end": 450,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 354,
                            "tagName": {
                                "pos": 384,
                                "end": 387,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "see"
                            },
                            "comment": "<p>://marella.me/material-icons/demo/{@link https} Icon list</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nname of the icon\nSee {@link https://marella.me/material-icons/demo/} Icon list\n",
                    "description": "<p>name of the icon\nSee {@link <a href=\"https://marella.me/material-icons/demo/%7D\">https://marella.me/material-icons/demo/}</a> Icon list</p>\n",
                    "line": 19,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "outline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply outline variation\n",
                    "description": "<p>Apply outline variation</p>\n",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "plain",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply plain variation\n",
                    "description": "<p>Apply plain variation</p>\n",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>The <code>&lt;ngx-button&gt;</code> component is a wrapper for <code>&lt;button&gt;</code> element</p>\n",
            "rawdescription": "\n\nThe `<ngx-button>` component is a wrapper for `<button>` element\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { ButtonColor } from '../types';\r\n\r\n/**\r\n * @component\r\n * The `<ngx-button>` component is a wrapper for `<button>` element\r\n */\r\n@Component({\r\n  selector: 'ngx-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrl: './button.component.scss',\r\n})\r\nexport class ButtonComponent {\r\n  /**\r\n   * name of the icon\r\n   * @see {@link https://marella.me/material-icons/demo/} Icon list\r\n   */\r\n  @Input()\r\n  icon: string | null = null;\r\n\r\n  @Input()\r\n  color: ButtonColor = 'primary';\r\n\r\n  /**\r\n   * Apply outline variation\r\n   */\r\n  @Input()\r\n  outline = false;\r\n\r\n  /**\r\n   * Disable button functionality\r\n   */\r\n  @Input()\r\n  disabled = false;\r\n\r\n  /**\r\n   * Apply plain variation\r\n   */\r\n  @Input()\r\n  plain = false;\r\n\r\n  /**\r\n   * Base class applied to the button component\r\n   * @return scss class applied to the button\r\n   */\r\n  protected get baseClass() {\r\n    if (this.outline) return `ngx-button--outline-${this.color}`;\r\n    if (this.plain) return `ngx-button--plain-${this.color}`;\r\n\r\n    return `ngx-button--default-${this.color}`;\r\n  }\r\n}\r\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button [disabled]=\"disabled\" [ngClass]=\"baseClass\" class=\"ngx-button p-1\">\r\n  <em *ngIf=\"icon\" class=\"material-icons\">{{ icon }}</em>\r\n  <div class=\"ngx-button__wrapper\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</button>\r\n"
        },
        {
            "name": "DatepickerComponent",
            "id": "component-DatepickerComponent-cd6d96164c887dc3373f7671864bba0f266fcefac96b51775252a7fe73ae9596a61cd764b846c70c9613c6c6c2975fba86288add32485d46a6f2ec73f2bfe72f",
            "file": "projects/ngx-relic/src/lib/datepicker/datepicker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-datepicker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./datepicker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "CvaDirective",
                    "inputs": [],
                    "outputs": []
                }
            ],
            "inputsClass": [
                {
                    "name": "errorText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText displayed in the bottom of the input component when the\ninput value does not comply with the expected validation\n",
                    "description": "<p>Text displayed in the bottom of the input component when the\ninput value does not comply with the expected validation</p>\n",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helperText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText displayed in the bottom of the input component as a helper for the user\n",
                    "description": "<p>Text displayed in the bottom of the input component as a helper for the user</p>\n",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label associated with the datepicker field.\n",
                    "description": "<p>The label associated with the datepicker field.</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "locale",
                    "defaultValue": "'en'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLanguage format\n",
                    "description": "<p>Language format</p>\n",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder text displayed when the field is empty.\n",
                    "description": "<p>The placeholder text displayed when the field is empty.</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether the input field is mandatory\n",
                    "description": "<p>Indicates whether the input field is mandatory</p>\n",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "toggleCalendar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>The <code>&lt;ngx-datepicker&gt;</code> component is used to allow users to select a date in an easy and visual way. It is a\nflexible component that offers customization options to suit the needs of any application.</p>\n",
            "rawdescription": "\n\nThe `<ngx-datepicker>` component is used to allow users to select a date in an easy and visual way. It is a\nflexible component that offers customization options to suit the needs of any application.\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  inject,\r\n} from '@angular/core';\r\nimport { DateTime } from 'luxon';\r\nimport { CvaDirective } from '../core/cva.directive';\r\nimport { Day } from '../core/types';\r\n\r\n/**\r\n * The `<ngx-datepicker>` component is used to allow users to select a date in an easy and visual way. It is a\r\n * flexible component that offers customization options to suit the needs of any application.\r\n */\r\n@Component({\r\n  selector: 'ngx-datepicker',\r\n  templateUrl: './datepicker.component.html',\r\n  styleUrl: './datepicker.component.scss',\r\n  hostDirectives: [\r\n    {\r\n      directive: CvaDirective,\r\n    },\r\n  ],\r\n})\r\nexport class DatepickerComponent {\r\n  /**\r\n   * Indicates whether the input field is mandatory\r\n   */\r\n  @Input()\r\n  required = false;\r\n\r\n  /**\r\n   * The label associated with the datepicker field.\r\n   */\r\n  @Input()\r\n  label = '';\r\n\r\n  /**\r\n   * The placeholder text displayed when the field is empty.\r\n   */\r\n  @Input()\r\n  placeholder = '';\r\n\r\n  /**\r\n   * Text displayed in the bottom of the input component when the\r\n   * input value does not comply with the expected validation\r\n   */\r\n  @Input()\r\n  errorText = '';\r\n\r\n  /**\r\n   * Text displayed in the bottom of the input component as a helper for the user\r\n   */\r\n  @Input()\r\n  helperText = '';\r\n\r\n  /**\r\n   * Language format\r\n   */\r\n  @Input()\r\n  locale = 'en';\r\n\r\n  protected internalDate = null;\r\n  protected selectedDate!: string;\r\n  protected showCalendar = false;\r\n  protected changeYear = false;\r\n  protected calendarWidth!: string;\r\n  protected currentMonth!: string;\r\n  protected currentYear!: number;\r\n  protected daysInMonth: any[] = [];\r\n  protected years: number[] = [];\r\n  protected weekdays: Day[] = [];\r\n\r\n  protected readonly _cvaDirective = inject<CvaDirective>(CvaDirective);\r\n\r\n  private elementRef = inject(ElementRef);\r\n\r\n  get currentPlaceholder() {\r\n    return this.selectedDate ?? this.placeholder;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @ignore\r\n   */\r\n  @HostListener('document:click', ['$event'])\r\n  onDocumentClick(event: MouseEvent) {\r\n    const datepickerElement = this.elementRef.nativeElement;\r\n    const clickedInside = datepickerElement.contains(event.target);\r\n    if (!clickedInside) {\r\n      this.showCalendar = false;\r\n    }\r\n  }\r\n\r\n  constructor() {\r\n    this.initWeekDays();\r\n    this.initCalendar(DateTime.now().setLocale(this.locale));\r\n    this.initYears();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @ignore\r\n   */\r\n  ngOnInit() {\r\n    const styles = getComputedStyle(this.elementRef.nativeElement);\r\n    this.calendarWidth = styles.width;\r\n  }\r\n\r\n  protected initWeekDays() {\r\n    this.weekdays = [];\r\n    const firstDayOfWeek = DateTime.local()\r\n      .setLocale(this.locale)\r\n      .startOf('week');\r\n\r\n    for (let i = 0; i < 7; i++) {\r\n      const name = firstDayOfWeek.plus({ days: i }).toFormat('cccc');\r\n      this.weekdays.push({ day: i + 1, name });\r\n    }\r\n  }\r\n\r\n  protected initCalendar(date: DateTime) {\r\n    this.currentMonth = date.toFormat('MMMM');\r\n    this.currentYear = date.year;\r\n    this.daysInMonth = [];\r\n\r\n    const startOfMonth = date.startOf('month');\r\n    const endOfMonth = date.endOf('month');\r\n    const initialEmptyCells = startOfMonth.weekday;\r\n    const lastEmptyCells = 7 - endOfMonth.weekday;\r\n    const daysInMonth = startOfMonth.daysInMonth || 0;\r\n    const arrayLength = initialEmptyCells + lastEmptyCells + daysInMonth;\r\n    let currentDate = startOfMonth;\r\n\r\n    for (let i = 1; i < arrayLength; i++) {\r\n      let day: any = {};\r\n\r\n      if (i < initialEmptyCells || i > initialEmptyCells + daysInMonth - 1) {\r\n        day.value = 0;\r\n        day.available = false;\r\n      } else {\r\n        day.value = i - initialEmptyCells + 1;\r\n        day.available = this.isAvailable(i - initialEmptyCells + 1);\r\n        day.date = currentDate;\r\n        currentDate = currentDate.plus({ day: 1 });\r\n      }\r\n\r\n      this.daysInMonth.push(day);\r\n    }\r\n  }\r\n\r\n  protected initYears() {\r\n    let currentYear = new Date().getFullYear();\r\n    for (let i = 0; i <= 15; i++) {\r\n      this.years.push(currentYear);\r\n      currentYear++;\r\n    }\r\n  }\r\n\r\n  toggleCalendar() {\r\n    this.showCalendar = !this.showCalendar;\r\n  }\r\n\r\n  protected onYearClick() {\r\n    this.changeYear = !this.changeYear;\r\n  }\r\n\r\n  protected isAvailable(num: number) {\r\n    return num === 5 ? false : true;\r\n  }\r\n\r\n  protected isDaySelected(day: DateTime) {\r\n    return day.toFormat('yyyy-MM-dd') === this.selectedDate;\r\n  }\r\n\r\n  protected previousYear() {\r\n    let currentYear = this.years[0] - 10;\r\n    this.years = [];\r\n    for (let i = 0; i <= 15; i++) {\r\n      this.years.push(currentYear);\r\n      currentYear--;\r\n    }\r\n  }\r\n\r\n  protected nextYear() {\r\n    let currentYear = this.years.slice(-1)[0] + 10;\r\n    this.years = [];\r\n\r\n    for (let i = 0; i <= 15; i++) {\r\n      this.years.push(currentYear);\r\n      currentYear++;\r\n    }\r\n  }\r\n\r\n  protected previousMonth(): void {\r\n    const currentDate = DateTime.fromFormat(\r\n      `${this.currentYear}-${this.currentMonth}`,\r\n      'yyyy-MMMM',\r\n    );\r\n    this.initCalendar(currentDate.minus({ months: 1 }));\r\n  }\r\n\r\n  protected nextMonth(): void {\r\n    const currentDate = DateTime.fromFormat(\r\n      `${this.currentYear}-${this.currentMonth}`,\r\n      'yyyy-MMMM',\r\n    );\r\n    this.initCalendar(currentDate.plus({ months: 1 }));\r\n  }\r\n\r\n  protected selectYear(year: number) {\r\n    const currentDate = DateTime.fromObject({ year, month: 1, day: 1 });\r\n    this.initCalendar(currentDate);\r\n    this.onYearClick();\r\n  }\r\n\r\n  protected selectDate(day: any) {\r\n    this.selectedDate = day.date.toFormat('yyyy-MM-dd');\r\n    this.onChange(this.selectedDate);\r\n    this.showCalendar = false;\r\n  }\r\n\r\n  protected onChange(value: string | number) {\r\n    this._cvaDirective.onChange(value);\r\n    this._cvaDirective.onTouched();\r\n  }\r\n}\r\n",
            "styleUrl": "./datepicker.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 94
            },
            "extends": [],
            "accessors": {
                "currentPlaceholder": {
                    "name": "currentPlaceholder",
                    "getSignature": {
                        "name": "currentPlaceholder",
                        "type": "",
                        "returnType": "",
                        "line": 79
                    }
                }
            },
            "templateData": "<div #datepicker>\r\n  <ngx-base-input\r\n    [required]=\"required\"\r\n    [label]=\"label\"\r\n    [hasErrors]=\"_cvaDirective.hasErrors\"\r\n    [errorText]=\"errorText\"\r\n    [helperText]=\"helperText\"\r\n    [disabled]=\"_cvaDirective._disabled\"\r\n  >\r\n    @if (!internalDate) {\r\n      <ngx-placeholder\r\n        [disabled]=\"_cvaDirective._disabled\"\r\n        class=\"pl-0 pt-1 pr-1 pb-1\"\r\n        >{{ currentPlaceholder }}</ngx-placeholder\r\n      >\r\n    }\r\n\r\n    <ngx-button\r\n      [disabled]=\"_cvaDirective._disabled\"\r\n      (click)=\"toggleCalendar()\"\r\n      icon=\"date_range\"\r\n    />\r\n  </ngx-base-input>\r\n  <div\r\n    *ngIf=\"showCalendar\"\r\n    [style.width]=\"calendarWidth\"\r\n    class=\"ngx-datepicker-calendar\"\r\n    id=\"calendar\"\r\n  >\r\n    <div class=\"ngx-datepicker-calendar__header p-1\">\r\n      <ngx-button\r\n        (click)=\"changeYear ? previousYear() : previousMonth()\"\r\n        [plain]=\"true\"\r\n        icon=\"chevron_left\"\r\n      />\r\n      <ngx-button (click)=\"onYearClick()\" [plain]=\"true\">\r\n        {{ currentMonth }} {{ currentYear }}\r\n      </ngx-button>\r\n      <ngx-button\r\n        (click)=\"changeYear ? nextYear(currentYear) : nextMonth()\"\r\n        [plain]=\"true\"\r\n        icon=\"chevron_right\"\r\n      />\r\n    </div>\r\n    <!-- Calendar days -->\r\n    <div [appHidden]=\"changeYear\" class=\"ngx-datepicker-calendar__days p-1\">\r\n      <div *ngFor=\"let day of weekdays\" class=\"ngx-datepicker-calendar__day\">\r\n        {{ day.name[0].toUpperCase() }}\r\n      </div>\r\n      <div *ngFor=\"let day of daysInMonth\" class=\"ngx-datepicker-calendar__day\">\r\n        @if (day.value !== 0) {\r\n          <ngx-button\r\n            (click)=\"selectDate(day)\"\r\n            [plain]=\"!isDaySelected(day.date)\"\r\n            >{{ day.value }}</ngx-button\r\n          >\r\n        }\r\n      </div>\r\n    </div>\r\n    <!-- Calendar years -->\r\n    <div [appHidden]=\"!changeYear\" class=\"ngx-datepicker-calendar__years p-1\">\r\n      <div *ngFor=\"let year of years\" class=\"ngx-datepicker-calendar__year\">\r\n        <ngx-button (click)=\"selectYear(year)\" [plain]=\"currentYear !== year\">{{\r\n          year\r\n        }}</ngx-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-5be1923a4aaec99309cf24a8af2646f0c226043e533d16d5cafe6fde248e5865ac5b1690c451c751b7d080a0c17ada73e89c4fd27eb3d61c30578187482a127a",
            "file": "projects/ngx-relic/src/lib/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [
                {
                    "name": "CvaDirective",
                    "inputs": [],
                    "outputs": []
                }
            ],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates if the input field is disabled.\n",
                    "description": "<p>Indicates if the input field is disabled.</p>\n",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText displayed in the bottom of the input component when the\ninput value does not comply with the expected validation\n",
                    "description": "<p>Text displayed in the bottom of the input component when the\ninput value does not comply with the expected validation</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helperText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText displayed in the bottom of the input component as a helper for the user\n",
                    "description": "<p>Text displayed in the bottom of the input component as a helper for the user</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label associated with the input field.\n",
                    "description": "<p>The label associated with the input field.</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder text displayed when the field is empty.\n",
                    "description": "<p>The placeholder text displayed when the field is empty.</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether the input field is mandatory\n",
                    "description": "<p>Indicates whether the input field is mandatory</p>\n",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe type of input field. Common values include **text**, **password**, **email**, **number**, **tel**, among others.\n",
                    "description": "<p>The type of input field. Common values include <strong>text</strong>, <strong>password</strong>, <strong>email</strong>, <strong>number</strong>, <strong>tel</strong>, among others.</p>\n",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>The <code>&lt;ngx-input&gt;</code> component is used to capture user data through an input field. It is a\nversatile component that supports multiple data types, validations, and custom styles.</p>\n",
            "rawdescription": "\n\nThe `<ngx-input>` component is used to capture user data through an input field. It is a\nversatile component that supports multiple data types, validations, and custom styles.\n",
            "type": "component",
            "sourceCode": "import { Component, Input, inject } from '@angular/core';\nimport { CvaDirective } from '../core/cva.directive';\n\n/**\n * The `<ngx-input>` component is used to capture user data through an input field. It is a\n * versatile component that supports multiple data types, validations, and custom styles.\n */\n@Component({\n  selector: 'ngx-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  hostDirectives: [\n    {\n      directive: CvaDirective,\n    },\n  ],\n})\nexport class InputComponent {\n  /**\n   * The label associated with the input field.\n   */\n  @Input()\n  label = '';\n\n  /**\n   * The placeholder text displayed when the field is empty.\n   */\n  @Input()\n  placeholder = '';\n\n  /**\n   * Text displayed in the bottom of the input component when the\n   * input value does not comply with the expected validation\n   */\n  @Input()\n  errorText = '';\n\n  /**\n   * Text displayed in the bottom of the input component as a helper for the user\n   */\n  @Input()\n  helperText = '';\n\n  /**\n   * Indicates whether the input field is mandatory\n   */\n  @Input()\n  required = false;\n\n  /**\n   * Indicates if the input field is disabled.\n   */\n  @Input()\n  disabled = false;\n\n  /**\n   * The type of input field. Common values include **text**, **password**, **email**, **number**, **tel**, among others.\n   */\n  @Input()\n  type = '';\n\n  protected _value: number | string = '';\n\n  protected readonly _cvaDirective = inject<CvaDirective>(CvaDirective);\n\n  protected onChange(value: string | number) {\n    this._cvaDirective.onChange(value);\n    this._cvaDirective.onTouched();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/scss/base/typography\";\r\n\r\n:host {\r\n  display: inline-block;\r\n}\r\n\r\ninput {\r\n  width: 100%;\r\n\r\n  background: transparent;\r\n  border: none;\r\n\r\n  &:focus-visible {\r\n    outline: 0px;\r\n  }\r\n\r\n  &::placeholder {\r\n    opacity: 1 !important;\r\n    font-size: $text-sm;\r\n    color: var(--color-slate-600);\r\n    @media (prefers-color-scheme: dark) {\r\n      color: var(--color-slate-50);\r\n    }\r\n  }\r\n\r\n  &:disabled::placeholder {\r\n    font-size: $text-sm;\r\n    color: var(--color-slate-400);\r\n  }\r\n}\r\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<ngx-base-input\n  [hasErrors]=\"_cvaDirective.hasErrors\"\n  [errorText]=\"errorText\"\n  [helperText]=\"helperText\"\n  [label]=\"label\"\n  [disabled]=\"_cvaDirective._disabled\"\n  [required]=\"required\"\n>\n  <input\n    [type]=\"type\"\n    [placeholder]=\"placeholder\"\n    [disabled]=\"_cvaDirective._disabled\"\n    [(ngModel)]=\"_value\"\n    (ngModelChange)=\"onChange($event)\"\n  />\n</ngx-base-input>\n"
        },
        {
            "name": "LabelComponent",
            "id": "component-LabelComponent-809f566adb5037da5451b81bb58c0e5429ced502215650e176793f5767fff90a84af058450b2e20ab2cb794effb337b8c78f37238bb9f427188cc46f59044240",
            "file": "projects/ngx-relic/src/lib/label/label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-label",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./label.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDisabled state to change styles\n",
                    "description": "<p>Disabled state to change styles</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShows that the form control component is required\n",
                    "description": "<p>Shows that the form control component is required</p>\n",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>This component is used as part of any forms component to display the label of the form control</p>\n",
            "rawdescription": "\n\nThis component is used as part of any forms component to display the label of the form control\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n/**\r\n * @component\r\n * This component is used as part of any forms component to display the label of the form control\r\n */\r\n@Component({\r\n  selector: 'ngx-label',\r\n  templateUrl: './label.component.html',\r\n  styleUrl: './label.component.scss',\r\n})\r\nexport class LabelComponent {\r\n  /**\r\n   * Shows that the form control component is required\r\n   */\r\n  @Input()\r\n  required = false;\r\n\r\n  /**\r\n   * Disabled state to change styles\r\n   */\r\n  @Input()\r\n  disabled = false;\r\n}\r\n",
            "styleUrl": "./label.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<label class=\"ngx-label\" [ngClass]=\"{ 'ngx-label--disabled': disabled }\">\r\n  <ng-content></ng-content>\r\n  <span\r\n    *ngIf=\"required\"\r\n    class=\"ngx-label__required\"\r\n    [ngClass]=\"{ 'ngx-label__required--disabled': disabled }\"\r\n    >*</span\r\n  >\r\n</label>\r\n"
        },
        {
            "name": "PaginationComponent",
            "id": "component-PaginationComponent-05bdcc1376ad81bad4f761b8e35149d4dec167eef7c7701587abdaf56487f12a0a520c0c639bb59decad11f223cc81d54486f89314dc34f8eeb6e4553dc352d2",
            "file": "projects/ngx-relic/src/lib/pagination/pagination.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-pagination",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./pagination.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentPage",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "limit",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "pageChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "numberPages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "pageShow",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-pagination',\r\n  templateUrl: './pagination.component.html',\r\n  styleUrl: './pagination.component.scss',\r\n})\r\nexport class PaginationComponent {\r\n  @Input()\r\n  currentPage = 1;\r\n\r\n  @Input()\r\n  limit = 10;\r\n\r\n  @Input()\r\n  total!: number;\r\n\r\n  @Output()\r\n  pageChange: EventEmitter<number> = new EventEmitter();\r\n\r\n  numberPages: number[] = [];\r\n  pageShow = 1;\r\n\r\n  get totalPages() {\r\n    return Math.ceil(this.total / this.limit);\r\n  }\r\n\r\n  ngOnChanges() {\r\n    const page = this.totalPages;\r\n\r\n    this.numberPages = Array(page)\r\n      .fill(0)\r\n      .map((_, index) => index + 1);\r\n  }\r\n\r\n  changePage(page: number) {\r\n    this.pageChange.emit(page);\r\n  }\r\n}\r\n",
            "styleUrl": "./pagination.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "totalPages": {
                    "name": "totalPages",
                    "getSignature": {
                        "name": "totalPages",
                        "type": "",
                        "returnType": "",
                        "line": 24
                    }
                }
            },
            "templateData": "<div class=\"ngx-pagination p-2\">\r\n  <ngx-button\r\n    (click)=\"changePage(currentPage - 1)\"\r\n    [disabled]=\"currentPage === 0\"\r\n    [plain]=\"true\"\r\n    icon=\"chevron_left\"\r\n  />\r\n  <div *ngFor=\"let number of numberPages\">\r\n    <ngx-button\r\n      (click)=\"changePage(number - 1)\"\r\n      [plain]=\"number - 1 !== currentPage\"\r\n      color=\"primary\"\r\n      class=\"ngx-pagination__number\"\r\n      >{{ number }}</ngx-button\r\n    >\r\n  </div>\r\n  <ngx-button\r\n    (click)=\"changePage(currentPage + 1)\"\r\n    [disabled]=\"currentPage === totalPages || currentPage === totalPages - 1\"\r\n    [plain]=\"true\"\r\n    icon=\"chevron_right\"\r\n  />\r\n</div>\r\n"
        },
        {
            "name": "PlaceholderComponent",
            "id": "component-PlaceholderComponent-ef17ca82077ae3bcb1847cc969819b2ac04b82a999168cc409ce61f7b5100d7cc6b191fbbfde199340e40ff2a592b7646cb0d20b17013d0c498c9afd24dea4c3",
            "file": "projects/ngx-relic/src/lib/placeholder/placeholder.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-placeholder",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./placeholder.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngx-placeholder',\r\n  templateUrl: './placeholder.component.html',\r\n  styleUrl: './placeholder.component.scss',\r\n})\r\nexport class PlaceholderComponent {\r\n  @Input()\r\n  disabled = false;\r\n}\r\n",
            "styleUrl": "./placeholder.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span\r\n  [ngClass]=\"{ 'ngx-placeholder--disabled': disabled }\"\r\n  class=\"ngx-placeholder\"\r\n>\r\n  <ng-content></ng-content>\r\n</span>\r\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-1b6904e89c4e7f66c26e4d7e02952ecbbc1c150c8637d85facc69dd95445cb3bd63dcb3791083bf23d5442dd292a3527b842b7280849e2e2155c5d9f0fe667a5",
            "file": "projects/ngx-relic/src/lib/select/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, multi: true, useExisting: forwardRef(() => SelectComponent),\n}",
                    "type": "component"
                }
            ],
            "selector": "ngx-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "closeOnSelect",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates if the select options are closed after the selection of an option\n",
                    "description": "<p>Indicates if the select options are closed after the selection of an option</p>\n",
                    "line": 106,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates if the component is disabled\n",
                    "description": "<p>Indicates if the component is disabled</p>\n",
                    "line": 100,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText displayed in the bottom of the input component when the\ninput value does not comply with the expected validation\n",
                    "description": "<p>Text displayed in the bottom of the input component when the\ninput value does not comply with the expected validation</p>\n",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helperText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nText displayed in the bottom of the input component as a helper for the user\n",
                    "description": "<p>Text displayed in the bottom of the input component as a helper for the user</p>\n",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe label associated with the datepicker field.\n",
                    "description": "<p>The label associated with the datepicker field.</p>\n",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelKey",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nKey label property from the type of objects passed through the options Input\n",
                    "description": "<p>Key label property from the type of objects passed through the options Input</p>\n",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates if multiple option selection is enabled\n",
                    "description": "<p>Indicates if multiple option selection is enabled</p>\n",
                    "line": 88,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "T[]",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe placeholder text displayed when the field is empty.\n",
                    "description": "<p>The placeholder text displayed when the field is empty.</p>\n",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether the input field is mandatory\n",
                    "description": "<p>Indicates whether the input field is mandatory</p>\n",
                    "line": 94,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showMax",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMaximum number of selected options in the placeholder field\n",
                    "description": "<p>Maximum number of selected options in the placeholder field</p>\n",
                    "line": 112,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "valueKey",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nKey value property from the type of objects passed through the options Input\n",
                    "description": "<p>Key value property from the type of objects passed through the options Input</p>\n",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 306,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRender the select options\n",
                    "description": "<p>Render the select options</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>The <code>&lt;ngx-select&gt;</code> component is used to allow users to choose an option from a drop-down set of options. It is a highly\ncustomizable component that supports multiple options, multiple selection, and various style and behavior settings.</p>\n",
            "rawdescription": "\n\nThe `<ngx-select>` component is used to allow users to choose an option from a drop-down set of options. It is a highly\ncustomizable component that supports multiple options, multiple selection, and various style and behavior settings.\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  HostListener,\n  ElementRef,\n  inject,\n  forwardRef,\n  Injector,\n} from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormControl,\n  FormControlDirective,\n  FormControlName,\n  FormGroupDirective,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n  NgModel,\n} from '@angular/forms';\nimport { OnChangeSelectFn, OnTouched, SelectOption } from '../../types';\nimport { Subject, takeUntil, tap } from 'rxjs';\n\n/**\n * @component\n * The `<ngx-select>` component is used to allow users to choose an option from a drop-down set of options. It is a highly\n * customizable component that supports multiple options, multiple selection, and various style and behavior settings.\n */\n@Component({\n  selector: 'ngx-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: forwardRef(() => SelectComponent),\n    },\n  ],\n})\nexport class SelectComponent<T extends object, U extends keyof T>\n  implements OnInit, ControlValueAccessor\n{\n  @Input()\n  options!: T[];\n\n  /**\n   * The label associated with the datepicker field.\n   */\n  @Input()\n  label = '';\n\n  /**\n   * The placeholder text displayed when the field is empty.\n   */\n  @Input()\n  placeholder = '';\n\n  /**\n   * Text displayed in the bottom of the input component when the\n   * input value does not comply with the expected validation\n   */\n  @Input()\n  errorText = '';\n\n  /**\n   * Text displayed in the bottom of the input component as a helper for the user\n   */\n  @Input()\n  helperText = '';\n\n  /**\n   * Key label property from the type of objects passed through the options Input\n   */\n  @Input()\n  labelKey = '';\n\n  /**\n   * Key value property from the type of objects passed through the options Input\n   */\n  @Input()\n  valueKey = '';\n\n  /**\n   * Indicates if multiple option selection is enabled\n   */\n  @Input()\n  multiple = false;\n\n  /**\n   * Indicates whether the input field is mandatory\n   */\n  @Input()\n  required = false;\n\n  /**\n   * Indicates if the component is disabled\n   */\n  @Input()\n  disabled = false;\n\n  /**\n   * Indicates if the select options are closed after the selection of an option\n   */\n  @Input()\n  closeOnSelect = true;\n\n  /**\n   * Maximum number of selected options in the placeholder field\n   */\n  @Input()\n  showMax = 1;\n\n  protected isOpen = false;\n  protected internalOptions: SelectOption[] = [];\n  protected selectedOptions: T[] = [];\n  private elementRef = inject(ElementRef);\n  private injector = inject(Injector);\n  protected control!: FormControl;\n  protected destroy = new Subject();\n  protected onChange!: OnChangeSelectFn<T>;\n  protected onTouched!: OnTouched;\n\n  /**\n   * @private\n   * @ignore\n   */\n  @HostListener('document:click', ['$event'])\n  onDocumentClick(event: MouseEvent) {\n    const clickedElement = event.target as HTMLElement;\n    const element = this.elementRef.nativeElement.querySelector('#element');\n    if (this.isOpen && element && !element.contains(clickedElement)) {\n      this.onTouched();\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * @private\n   * @ignore\n   */\n  ngOnInit() {\n    this.internalOptions = this.options.map((i) => ({ ...i, selected: false }));\n    this.setupModel();\n  }\n\n  /**\n   * @private\n   * @ignore\n   */\n  ngOnDestroy() {\n    this.destroy.next(true);\n    this.destroy.complete();\n  }\n\n  get showSelectedOptions() {\n    return this.selectedOptions.slice(0, this.showMax);\n  }\n\n  get selectedLabels() {\n    if (this.selectedOptions.length === 0) return this.placeholder;\n\n    if (this.multiple)\n      return this.selectedOptions\n        .map((i) => this.getKeyValue(this.labelKey as U, i))\n        .join(',');\n\n    return this.getKeyValue(this.labelKey as U, this.selectedOptions[0]);\n  }\n\n  get hasErrors() {\n    return this.control.errors && this.control.touched;\n  }\n\n  get itemScrollSize() {\n    return this.options.length >= 4 ? 4 : this.options.length;\n  }\n\n  get itemBufferSize() {\n    console.log(this.itemScrollSize * 38.8);\n    return `${Math.round(this.itemScrollSize * 38.8)}px`;\n  }\n\n  protected setupModel() {\n    const injectedControl = this.injector.get(NgControl);\n\n    switch (injectedControl.constructor) {\n      case NgModel: {\n        const { control, update } = injectedControl as NgModel;\n\n        this.control = control;\n\n        this.control.valueChanges\n          .pipe(\n            tap((value: T) => update.emit(value)),\n            takeUntil(this.destroy),\n          )\n          .subscribe();\n        break;\n      }\n      case FormControlName: {\n        this.control = this.injector\n          .get(FormGroupDirective)\n          .getControl(injectedControl as FormControlName);\n        break;\n      }\n      default: {\n        this.control = (injectedControl as FormControlDirective)\n          .form as FormControl;\n        break;\n      }\n    }\n\n    this.control.registerOnDisabledChange((isDisabled) => {\n      this.disabled = isDisabled;\n    });\n\n    this.disabled = this.control.status === 'DISABLED';\n  }\n\n  /**\n   * @private\n   * @ignore\n   */\n  writeValue(value: T[]): void {\n    if (value) {\n      this.selectedOptions = value;\n    }\n  }\n\n  /**\n   * @private\n   * @ignore\n   */\n  registerOnChange(fn: OnChangeSelectFn<T>): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * @private\n   * @ignore\n   */\n  registerOnTouched(fn: OnTouched): void {\n    this.onTouched = fn;\n  }\n\n  protected onMultipleClick(\n    { selected, ...option }: SelectOption,\n    index: number,\n  ) {\n    const selectedOption = this.selectedOptions.find(\n      (i) =>\n        this.getKeyValue(this.valueKey as U, i as T) ===\n        this.getKeyValue(this.valueKey as U, option as T),\n    );\n\n    if (!selectedOption) {\n      this.selectedOptions.push(option as T);\n      this.internalOptions[index].selected = !selected;\n    } else {\n      this.selectedOptions = this.selectedOptions.filter(\n        (i) =>\n          this.getKeyValue(this.valueKey as U, i as T) !==\n          this.getKeyValue(this.valueKey as U, option as T),\n      );\n\n      this.internalOptions[index].selected = !selected;\n    }\n    this.onTouched();\n    this.onChange([...this.selectedOptions]);\n    this.onItemClick();\n  }\n\n  protected onSingleClick({ selected, ...rest }: SelectOption, index: number) {\n    this.clearSelection();\n    this.selectedOptions = [rest as T];\n    this.internalOptions[index].selected = !selected;\n    this.onTouched();\n    this.onChange(this.selectedOptions);\n    this.onItemClick();\n  }\n\n  protected removeItem(item: SelectOption) {\n    this.selectedOptions = this.selectedOptions.filter(\n      (i) =>\n        this.getKeyValue(this.valueKey as U, i as T) !==\n        this.getKeyValue(this.valueKey as U, item as T),\n    );\n    const internalIndex = this.internalOptions.findIndex(\n      (i) =>\n        this.getKeyValue(this.valueKey as U, i as T) ===\n        this.getKeyValue(this.valueKey as U, item as T),\n    );\n    this.internalOptions[internalIndex].selected = false;\n    this.onChange(this.selectedOptions);\n  }\n\n  protected clearSelection() {\n    const index = this.internalOptions.findIndex((i) => i.selected);\n    if (index > -1) this.internalOptions[index].selected = false;\n  }\n\n  /**\n   * Render the select options\n   */\n  openSelect() {\n    this.isOpen = !this.isOpen;\n  }\n\n  protected onItemClick() {\n    if (this.closeOnSelect) this.isOpen = false;\n  }\n\n  protected getKeyValue(key: U, object: T) {\n    return object[key];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: inline-block;\r\n}\r\n\r\n.ngx-select {\r\n  &__options-container {\r\n    position: absolute;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow-x: hidden;\r\n    background-color: var(--color-neutral-50);\r\n    z-index: 200;\r\n    box-shadow:\r\n      0 4px 6px -1px rgb(0 0 0 / 0.1),\r\n      0 2px 4px -2px rgb(0 0 0 / 0.1);\r\n    left: 0;\r\n    right: 0;\r\n    top: 43px;\r\n  }\r\n\r\n  &__placeholder {\r\n    flex-grow: 1;\r\n    align-self: center;\r\n  }\r\n\r\n  &__tags-container {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  // &__scroll {\r\n  //   min-height: 168px;\r\n  // }\r\n\r\n  &__expand {\r\n    cursor: pointer;\r\n    color: var(--color-primary-900);\r\n    height: 100%;\r\n  }\r\n}\r\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "accessors": {
                "showSelectedOptions": {
                    "name": "showSelectedOptions",
                    "getSignature": {
                        "name": "showSelectedOptions",
                        "type": "",
                        "returnType": "",
                        "line": 156
                    }
                },
                "selectedLabels": {
                    "name": "selectedLabels",
                    "getSignature": {
                        "name": "selectedLabels",
                        "type": "",
                        "returnType": "",
                        "line": 160
                    }
                },
                "hasErrors": {
                    "name": "hasErrors",
                    "getSignature": {
                        "name": "hasErrors",
                        "type": "",
                        "returnType": "",
                        "line": 171
                    }
                },
                "itemScrollSize": {
                    "name": "itemScrollSize",
                    "getSignature": {
                        "name": "itemScrollSize",
                        "type": "",
                        "returnType": "",
                        "line": 175
                    }
                },
                "itemBufferSize": {
                    "name": "itemBufferSize",
                    "getSignature": {
                        "name": "itemBufferSize",
                        "type": "",
                        "returnType": "",
                        "line": 179
                    }
                }
            },
            "templateData": "<ngx-base-input\n  [required]=\"required\"\n  [label]=\"label\"\n  [hasErrors]=\"hasErrors\"\n  [errorText]=\"errorText\"\n  [helperText]=\"helperText\"\n  [disabled]=\"disabled\"\n  class=\"ngx-select\"\n  id=\"element\"\n>\n  @if (showSelectedOptions.length > 0) {\n    <div class=\"ngx-select__tags-container px-1\">\n      <ngx-tag\n        *ngFor=\"let option of showSelectedOptions\"\n        (closeClick)=\"removeItem(option)\"\n        [close]=\"!disabled\"\n        [state]=\"disabled ? 'neutral' : 'primary'\"\n        [outline]=\"true\"\n        state=\"primary\"\n        >{{ option[labelKey] }}</ngx-tag\n      >\n      <ngx-tag *ngIf=\"selectedOptions.length - showMax > 0\" class=\"ml-1\"\n        >+ {{ selectedOptions.length - showMax }}</ngx-tag\n      >\n    </div>\n  }\n  @if (selectedOptions.length === 0) {\n    <ngx-placeholder [disabled]=\"disabled\" class=\"pl-0 pt-1 pr-1 pb-1\">{{\n      placeholder\n    }}</ngx-placeholder>\n  }\n  <ngx-button\n    (click)=\"openSelect()\"\n    [disabled]=\"disabled\"\n    [color]=\"hasErrors ? 'danger' : 'primary'\"\n    [icon]=\"isOpen ? 'expand_less' : 'expand_more'\"\n    class=\"ngx-select__expand\"\n  />\n\n  <div #optionsContainer class=\"ngx-select__options-container\" *ngIf=\"isOpen\">\n    <cdk-virtual-scroll-viewport\n      [style.minHeight]=\"itemBufferSize\"\n      [itemSize]=\"itemScrollSize\"\n      [minBufferPx]=\"itemBufferSize\"\n      maxBufferPx=\"400\"\n      class=\"ngx-select__scroll\"\n    >\n      <ngx-select-item\n        *cdkVirtualFor=\"let option of internalOptions; let i = index\"\n        (click)=\"\n          multiple ? onMultipleClick(option, i) : onSingleClick(option, i)\n        \"\n        [selected]=\"option.selected\"\n        [multiple]=\"multiple\"\n        [ngStyle]=\"{ width: optionsContainer.offsetWidth }\"\n      >\n        {{ option[labelKey] }}\n      </ngx-select-item>\n    </cdk-virtual-scroll-viewport>\n  </div>\n</ngx-base-input>\n"
        },
        {
            "name": "SelectItemComponent",
            "id": "component-SelectItemComponent-9e057ac017f0be677917c79c7d82797e225e65c90c4a280bea6fbfc8ec4cb0687c49620213a9b3309cabf1df72040a25a33e08bdf826c7b280322d735eaaec5e",
            "file": "projects/ngx-relic/src/lib/select/select-item/select-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-select-item",
            "styleUrls": [
                "./select-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'ngx-select-item',\n  templateUrl: './select-item.component.html',\n  styleUrls: ['./select-item.component.scss'],\n})\nexport class SelectItemComponent {\n  @Input()\n  selected = false;\n\n  @Input()\n  multiple = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../assets/scss/base/typography\";\r\n\r\n.ngx-select-item {\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  border-bottom: 1px solid var(--color-neutral-700);\r\n  font-size: $text-sm;\r\n  min-height: 25px;\r\n\r\n  @media (prefers-color-scheme: dark) {\r\n    background-color: var(--color-slate-700);\r\n  }\r\n\r\n  &:hover {\r\n    background-color: var(--color-neutral-200);\r\n\r\n    @media (prefers-color-scheme: dark) {\r\n      background-color: var(--color-neutral-600);\r\n    }\r\n  }\r\n\r\n  &--selected {\r\n    color: var(--color-primary-700);\r\n    background-color: var(--color-primary-200);\r\n  }\r\n\r\n  &__checkbox {\r\n    cursor: pointer;\r\n    width: 18px;\r\n    height: 18px;\r\n    font-size: 18px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./select-item.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div\n  class=\"ngx-select-item p-1\"\n  [ngClass]=\"{ 'ngx-select-item--selected': selected }\"\n>\n  <em\n    *ngIf=\"multiple\"\n    class=\"material-icons-outlined ngx-select-item__checkbox mr-1\"\n    [ngClass]=\"{ 'ngx-select-item--selected': selected }\"\n    >{{ selected ? \"check_box_outline\" : \"check_box_outline_blank\" }}</em\n  >\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-8cfbb904004d10b393b40eba2db2f24a31043db4b07ae9f523a234faaa015e2e66ca021e2481dd44cdb57c21bfa61a25ec9a64103c9662bca25ef15504a61fb5",
            "file": "projects/ngx-relic/src/lib/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "currentPage",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCurrent paginated page from the table\n",
                    "description": "<p>Current paginated page from the table</p>\n",
                    "line": 46,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nArray of objects to display in the table\n",
                    "description": "<p>Array of objects to display in the table</p>\n",
                    "line": 40,
                    "type": "TItem[]",
                    "decorators": []
                },
                {
                    "name": "limit",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLimit of items displayed per page\n",
                    "description": "<p>Limit of items displayed per page</p>\n",
                    "line": 58,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptions object to allow you to configure header and body properties\n",
                    "description": "<p>Options object to allow you to configure header and body properties</p>\n",
                    "line": 34,
                    "type": "TableOptions",
                    "decorators": []
                },
                {
                    "name": "paginator",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnable pagination for the table\n",
                    "description": "<p>Enable pagination for the table</p>\n",
                    "line": 52,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tableRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<TableRowDirective>",
                    "optional": true,
                    "description": "<p>Custom table rows to render</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nCustom table rows to render\n",
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "TableRowDirective"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>The <code>&lt;ngx-table&gt;</code> component render data through the <strong>Data Input</strong>, it is necessary to use the <strong>options Input</strong>\nto configure the columns to be displayed and editable visual changes for each one (title, width, align). Also, the <strong>body property</strong>\nallows editable alignment for each cell of a column</p>\n",
            "rawdescription": "\n\n\nThe `<ngx-table>` component render data through the **Data Input**, it is necessary to use the **options Input**\nto configure the columns to be displayed and editable visual changes for each one (title, width, align). Also, the **body property**\nallows editable alignment for each cell of a column\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ContentChildren,\r\n  Input,\r\n  OnInit,\r\n  QueryList,\r\n} from '@angular/core';\r\nimport { TableRowDirective } from './table-row.directive';\r\nimport { TableOptions } from '../types';\r\n\r\n/**\r\n *\r\n * @component\r\n * The `<ngx-table>` component render data through the **Data Input**, it is necessary to use the **options Input**\r\n * to configure the columns to be displayed and editable visual changes for each one (title, width, align). Also, the **body property**\r\n * allows editable alignment for each cell of a column\r\n */\r\n@Component({\r\n  selector: 'ngx-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrl: './table.component.scss',\r\n})\r\nexport class TableComponent<TItem extends object> implements OnInit {\r\n  /**\r\n   * Custom table rows to render\r\n   */\r\n  @ContentChildren(TableRowDirective)\r\n  tableRows?: QueryList<TableRowDirective>;\r\n\r\n  /**\r\n   * Options object to allow you to configure header and body properties\r\n   */\r\n  @Input()\r\n  options!: TableOptions;\r\n\r\n  /**\r\n   * Array of objects to display in the table\r\n   */\r\n  @Input()\r\n  data: TItem[] = [];\r\n\r\n  /**\r\n   * Current paginated page from the table\r\n   */\r\n  @Input()\r\n  currentPage = 1;\r\n\r\n  /**\r\n   * Enable pagination for the table\r\n   */\r\n  @Input()\r\n  paginator = true;\r\n\r\n  /**\r\n   * Limit of items displayed per page\r\n   */\r\n  @Input()\r\n  limit = 10;\r\n\r\n  /**\r\n   * Total number of data items\r\n   */\r\n  protected total = 0;\r\n\r\n  /**\r\n   * Current paginated data to render\r\n   */\r\n  protected paginatedData: TItem[] = [];\r\n\r\n  protected DEFAULT_COLUMN_WIDTH = '225px';\r\n  protected DEFAULT_TD_ALIGN = 'center';\r\n\r\n  get headers() {\r\n    return Object.keys(this.options.columns);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @ignore\r\n   */\r\n  ngOnInit(): void {\r\n    this.paginatedData = this.paginator\r\n      ? this.data.slice(0, this.limit)\r\n      : this.data;\r\n    this.total = this.data.length;\r\n  }\r\n\r\n  /**\r\n   * Change the current paginated page\r\n   * @param page\r\n   */\r\n  protected changePage(page: number) {\r\n    this.currentPage = page;\r\n    const initialIndex = this.limit * this.currentPage;\r\n    const finalIndex = initialIndex + this.limit;\r\n    this.paginatedData = this.data.slice(initialIndex, finalIndex);\r\n  }\r\n\r\n  protected findRow(columnName: string) {\r\n    const column = this.tableRows?.find((i) => i.appTableRow === columnName);\r\n    if (column) return column.element;\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Apply header styles for one column\r\n   * @param columnName property of the columns object contained in the options input\r\n   * @returns minWidth and textAlign css properties\r\n   */\r\n  protected headerStyles(columnName: string) {\r\n    return {\r\n      minWidth:\r\n        this.options?.columns && this.options?.columns[columnName]\r\n          ? this.options?.columns[columnName]?.width\r\n          : this.DEFAULT_COLUMN_WIDTH,\r\n      textAlign:\r\n        this.options?.columns && this.options?.columns[columnName]\r\n          ? this.options?.columns[columnName].align\r\n          : this.DEFAULT_TD_ALIGN,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Apply styles for a cell of the table\r\n   * @param columnName property of the columns object contained in the options input\r\n   * @returns textAlign css property\r\n   */\r\n  protected cellStyles(columnName: string) {\r\n    return {\r\n      textAlign:\r\n        this.options?.body && this.options?.body[columnName]\r\n          ? this.options?.body[columnName]?.align\r\n          : this.DEFAULT_TD_ALIGN,\r\n    };\r\n  }\r\n}\r\n",
            "styleUrl": "./table.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "headers": {
                    "name": "headers",
                    "getSignature": {
                        "name": "headers",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                }
            },
            "templateData": "<div class=\"ngx-table drop-shadow-xl content-center\">\r\n  <table class=\"ngx-table__table\">\r\n    <thead>\r\n      <tr>\r\n        <th\r\n          *ngFor=\"let column of headers\"\r\n          class=\"p-3\"\r\n          [ngStyle]=\"headerStyles(column)\"\r\n        >\r\n          {{ options.columns[column].title }}\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr *ngFor=\"let row of paginatedData; let i = index\">\r\n        <td\r\n          *ngFor=\"let property of headers\"\r\n          class=\"border border-y-stone-300 border-x-0 p-3\"\r\n          [ngStyle]=\"cellStyles(property)\"\r\n        >\r\n          <ng-container\r\n            [ngTemplateOutlet]=\"findRow(property) || defaultRow\"\r\n            [ngTemplateOutletContext]=\"{ $implicit: row, property }\"\r\n          ></ng-container>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  @if (paginator) {\r\n    <ngx-pagination\r\n      [currentPage]=\"currentPage\"\r\n      [limit]=\"limit\"\r\n      [total]=\"total\"\r\n      (pageChange)=\"changePage($event)\"\r\n    ></ngx-pagination>\r\n  }\r\n</div>\r\n\r\n<ng-template #defaultRow let-row let-property=\"property\">\r\n  {{ row[property] }}\r\n</ng-template>\r\n"
        },
        {
            "name": "TagComponent",
            "id": "component-TagComponent-9dbae0d310f15ae699682b7cb8851fb121d30b5ea3a00c5fa5b566d323076714c83357231e118355dad926efdc8fe84832c3fb2c84dfce884b477ddc99c1731e",
            "file": "projects/ngx-relic/src/lib/tag/tag.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-tag",
            "styleUrls": [
                "./tag.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tag.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "close",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnable close feature\n",
                    "description": "<p>Enable close feature</p>\n",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 595,
                            "end": 661,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 354,
                            "tagName": {
                                "pos": 596,
                                "end": 599,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "see"
                            },
                            "comment": "<p>://marella.me/material-icons/demo/{@link https} Icon list</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nname of the icon\nSee {@link https://marella.me/material-icons/demo/} Icon list\n",
                    "description": "<p>name of the icon\nSee {@link <a href=\"https://marella.me/material-icons/demo/%7D\">https://marella.me/material-icons/demo/}</a> Icon list</p>\n",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "outline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply outline style\n",
                    "description": "<p>Apply outline style</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSize of the tag\n",
                    "description": "<p>Size of the tag</p>\n",
                    "line": 32,
                    "type": "TagSize",
                    "decorators": []
                },
                {
                    "name": "state",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nState color to be applied\n",
                    "description": "<p>State color to be applied</p>\n",
                    "line": 26,
                    "type": "Color",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled event when close button is clicked\n",
                    "description": "<p>Called event when close button is clicked</p>\n",
                    "line": 50,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p> The <code>&lt;ngx-tag&gt;</code> component is used to display a tag that can contain text, an icon, or both. It is ideal for highlighting information,\ncategorizing elements, or displaying status. This component is highly configurable and allows customizations in style, size and behavior.</p>\n",
            "rawdescription": "\n\n The `<ngx-tag>` component is used to display a tag that can contain text, an icon, or both. It is ideal for highlighting information,\ncategorizing elements, or displaying status. This component is highly configurable and allows customizations in style, size and behavior.\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Color, TagSize } from '../types';\n\n/**\n * @component\n *  The `<ngx-tag>` component is used to display a tag that can contain text, an icon, or both. It is ideal for highlighting information,\n * categorizing elements, or displaying status. This component is highly configurable and allows customizations in style, size and behavior.\n */\n@Component({\n  selector: 'ngx-tag',\n  templateUrl: './tag.component.html',\n  styleUrls: ['./tag.component.scss'],\n})\nexport class TagComponent {\n  /**\n   * name of the icon\n   * @see {@link https://marella.me/material-icons/demo/} Icon list\n   */\n  @Input()\n  icon = '';\n\n  /**\n   * State color to be applied\n   */\n  @Input()\n  state: Color = 'primary';\n\n  /**\n   * Size of the tag\n   */\n  @Input()\n  size: TagSize = 'medium';\n\n  /**\n   * Enable close feature\n   */\n  @Input()\n  close = false;\n\n  /**\n   * Apply outline style\n   */\n  @Input()\n  outline = false;\n\n  /**\n   * Called event when close button is clicked\n   */\n  @Output()\n  onClose = new EventEmitter();\n\n  get defaultClass() {\n    return `ngx-tag--${this.state}-${this.size}`;\n  }\n\n  get outlineClass() {\n    return `ngx-tag--outline-${this.state}-${this.size}`;\n  }\n\n  get baseClass() {\n    return this.outline ? this.outlineClass : this.defaultClass;\n  }\n\n  protected onCloseClick() {\n    this.onClose.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../.././assets/scss/utils/variables\";\r\n\r\n:host {\r\n  display: inline-block;\r\n}\r\n\r\n.ngx-tag {\r\n  font-size: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  & > em {\r\n    cursor: pointer;\r\n    font-size: 13px;\r\n\r\n    &:hover {\r\n      color: var(--color-neutral-900);\r\n    }\r\n  }\r\n\r\n  @each $variation in $variations {\r\n    &--outline-#{$variation}-small {\r\n      border: 1px solid var(--color-#{$variation}-500);\r\n      color: var(--color-#{$variation}-400);\r\n      font-size: 8px;\r\n\r\n      & > em {\r\n        cursor: pointer;\r\n        font-size: 12px;\r\n      }\r\n    }\r\n\r\n    &--outline-#{$variation}-medium {\r\n      border: 1px solid var(--color-#{$variation}-500);\r\n      color: var(--color-#{$variation}-400);\r\n      font-size: 12px;\r\n\r\n      & > em {\r\n        cursor: pointer;\r\n        font-size: 16px;\r\n      }\r\n    }\r\n\r\n    &--outline-#{$variation}-large {\r\n      border: 1px solid var(--color-#{$variation}-500);\r\n      color: var(--color-#{$variation}-400);\r\n      font-size: 18px;\r\n\r\n      & > em {\r\n        cursor: pointer;\r\n        font-size: 24px;\r\n      }\r\n    }\r\n\r\n    &--#{$variation}-small {\r\n      border: 1px solid var(--color-#{$variation}-800);\r\n      background-color: var(--color-#{$variation}-500);\r\n      color: var(--color-slate-50);\r\n      font-size: 8px;\r\n    }\r\n\r\n    &--#{$variation}-medium {\r\n      border: 1px solid var(--color-#{$variation}-800);\r\n      background-color: var(--color-#{$variation}-500);\r\n      color: var(--color-slate-50);\r\n      font-size: 12px;\r\n    }\r\n\r\n    &--#{$variation}-large {\r\n      border: 1px solid var(--color-#{$variation}-800);\r\n      background-color: var(--color-#{$variation}-500);\r\n      color: var(--color-slate-50);\r\n      font-size: 18px;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./tag.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "defaultClass": {
                    "name": "defaultClass",
                    "getSignature": {
                        "name": "defaultClass",
                        "type": "",
                        "returnType": "",
                        "line": 52
                    }
                },
                "outlineClass": {
                    "name": "outlineClass",
                    "getSignature": {
                        "name": "outlineClass",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                },
                "baseClass": {
                    "name": "baseClass",
                    "getSignature": {
                        "name": "baseClass",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                }
            },
            "templateData": "<div [ngClass]=\"baseClass\" class=\"ngx-tag rounded-xs p-1\">\n  <em *ngIf=\"icon\" class=\"material-icons mr-1\">{{ icon }}</em>\n  <ng-content></ng-content>\n  <em *ngIf=\"close\" (click)=\"onCloseClick()\" class=\"material-icons ml-1\"\n    >close</em\n  >\n</div>\n"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-1a2a29d1e9fea72f9fe274d122182c648e971363bd4eef96896620ad3d827613c483f16ebef6f4ba57a2a2ef467a6d255dc9643e792172dbf018de3cb2a844ff",
            "file": "projects/ngx-relic/src/lib/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngx-tooltip",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "position",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPosition to be displayed\n",
                    "description": "<p>Position to be displayed</p>\n",
                    "line": 24,
                    "type": "\"top\" | \"left\" | \"right\" | \"bottom\"",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'125px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWidth of the tooltip\n",
                    "description": "<p>Width of the tooltip</p>\n",
                    "line": 18,
                    "type": "number | string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "<p>The <code>&lt;ngx-tooltip&gt;</code> component is used to display additional information when the user hovers over or selects an element.\nIt is a useful tool to provide contextual details without cluttering the user interface.</p>\n",
            "rawdescription": "\n\nThe `<ngx-tooltip>` component is used to display additional information when the user hovers over or selects an element.\nIt is a useful tool to provide contextual details without cluttering the user interface.\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n/**\n * @component\n * The `<ngx-tooltip>` component is used to display additional information when the user hovers over or selects an element.\n * It is a useful tool to provide contextual details without cluttering the user interface.\n */\n@Component({\n  selector: 'ngx-tooltip',\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.scss'],\n})\nexport class TooltipComponent {\n  /**\n   * Width of the tooltip\n   */\n  @Input()\n  width: number | string = '125px';\n\n  /**\n   * Position to be displayed\n   */\n  @Input()\n  position: 'top' | 'left' | 'right' | 'bottom' = 'bottom';\n\n  protected showTooltip = false;\n\n  get contentWidth() {\n    return typeof this.width === 'number' ? `${this.width}px` : this.width;\n  }\n\n  get positionClass() {\n    return `ngx-tooltip__content--${this.position}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: inline-block;\r\n}\r\n\r\n@mixin common-tooltip-arrow {\r\n  content: \"\";\r\n  position: absolute;\r\n  border-width: 5px;\r\n  border-style: solid;\r\n}\r\n\r\n.ngx-tooltip {\r\n  position: relative;\r\n  display: inline-block;\r\n\r\n  &__content {\r\n    position: absolute;\r\n    background-color: var(--color-neutral-700);\r\n    color: var(--color-slate-50);\r\n    border-radius: 6px;\r\n\r\n    &--top {\r\n      margin-bottom: 11px;\r\n      bottom: 100%;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n\r\n      &::after {\r\n        @include common-tooltip-arrow;\r\n        top: 100%;\r\n        left: 50%;\r\n        margin-left: -5px;\r\n        border-color: #555 transparent transparent transparent;\r\n      }\r\n    }\r\n\r\n    &--bottom {\r\n      margin-top: 11px;\r\n      top: 100%;\r\n      left: 50%;\r\n      transform: translateX(-50%);\r\n\r\n      &::after {\r\n        @include common-tooltip-arrow;\r\n        bottom: 100%;\r\n        left: 50%;\r\n        margin-left: -5px;\r\n        border-color: transparent transparent #555 transparent;\r\n      }\r\n    }\r\n\r\n    &--right {\r\n      bottom: 50%;\r\n      left: 100%;\r\n      transform: translateY(50%);\r\n      margin-left: 10px;\r\n\r\n      &::after {\r\n        @include common-tooltip-arrow;\r\n        top: 50%;\r\n        right: 100%;\r\n        margin-left: 11px;\r\n        border-color: transparent #555 transparent transparent;\r\n      }\r\n    }\r\n\r\n    &--left {\r\n      bottom: 50%;\r\n      right: 100%;\r\n      transform: translateY(50%);\r\n      margin-right: 11px;\r\n\r\n      &::after {\r\n        @include common-tooltip-arrow;\r\n        top: 50%;\r\n        left: 100%;\r\n        border-color: transparent transparent transparent #555;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "contentWidth": {
                    "name": "contentWidth",
                    "getSignature": {
                        "name": "contentWidth",
                        "type": "",
                        "returnType": "",
                        "line": 28
                    }
                },
                "positionClass": {
                    "name": "positionClass",
                    "getSignature": {
                        "name": "positionClass",
                        "type": "",
                        "returnType": "",
                        "line": 32
                    }
                }
            },
            "templateData": "<div\n  (mouseenter)=\"showTooltip = true\"\n  (mouseleave)=\"showTooltip = false\"\n  class=\"ngx-tooltip\"\n>\n  <ng-content select=\"[content]\"></ng-content>\n  <div\n    *ngIf=\"showTooltip\"\n    [style.width]=\"contentWidth\"\n    [ngClass]=\"positionClass\"\n    class=\"ngx-tooltip__content p-1\"\n  >\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "BaseInputModule",
            "id": "module-BaseInputModule-ac98e7f3dc549a4e4d29c021d70aea2c225b03970c77cba56959701e630c518be4ba65eff573ce56a7453fdc9b6927b7556c4bd0463befb639d212ace82e0630",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-relic/src/lib/base-input/base-input.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BaseInputComponent } from './base-input.component';\r\nimport { LabelModule } from '../label';\r\n\r\n@NgModule({\r\n  declarations: [BaseInputComponent],\r\n  imports: [CommonModule, LabelModule],\r\n  exports: [BaseInputComponent],\r\n})\r\nexport class BaseInputModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BaseInputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LabelModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BaseInputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ButtonModule",
            "id": "module-ButtonModule-fd855b062c137c8b5c1250741a8ad0be01b0f3f70cdd9401d60efc4a1c7b473dddfea529c852e5eb122df0a72191b21bf842293cb4256ad80de398678783084b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-relic/src/lib/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonComponent } from './button.component';\r\n\r\n@NgModule({\r\n  declarations: [ButtonComponent],\r\n  imports: [CommonModule],\r\n  exports: [ButtonComponent],\r\n})\r\nexport class ButtonModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-2a423055cea55b3fab71000236a81f71098278d7b3231300e78ed9b2f1d649819cfc5d0372b2bbd01b23fcf192c5efe3045bad98f1ec6c8b12fc91bf12d33ce7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-relic/src/lib/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HiddenDirective } from './hidden.directive';\r\n\r\n@NgModule({\r\n  declarations: [HiddenDirective],\r\n  imports: [CommonModule],\r\n  exports: [HiddenDirective],\r\n})\r\nexport class CoreModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HiddenDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HiddenDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DatepickerModule",
            "id": "module-DatepickerModule-118eaf5caf83b77dbb61fd7d978305e631d4e1aefccfc46a0d72b40eb269978a6fc438d2d6decbcbda8241c467c46e52f43776e1721b8a8d5f083f52617b16c9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-relic/src/lib/datepicker/datepicker.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CoreModule } from '../core/core.module';\r\nimport { DatepickerComponent } from './datepicker.component';\r\nimport { BaseInputModule } from '../base-input';\r\nimport { PlaceholderModule } from '../placeholder';\r\nimport { ButtonModule } from '../button';\r\n\r\n@NgModule({\r\n  declarations: [DatepickerComponent],\r\n  imports: [\r\n    CommonModule,\r\n    CoreModule,\r\n    BaseInputModule,\r\n    PlaceholderModule,\r\n    ButtonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  exports: [DatepickerComponent],\r\n})\r\nexport class DatepickerModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DatepickerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BaseInputModule"
                        },
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "PlaceholderModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DatepickerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InputModule",
            "id": "module-InputModule-d404d7372243ea8ee5204f63066d6df9baa57e1b8230999440cee35f1d7a5a12e2c2a6c3402070bd4035f79ffb4893caa6651b2428aba670f6cf16bbaf169585",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-relic/src/lib/input/input.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CoreModule } from '../core/core.module';\r\nimport { InputComponent } from './input.component';\r\nimport { BaseInputModule } from '../base-input';\r\n\r\n@NgModule({\r\n  declarations: [InputComponent],\r\n  imports: [\r\n    CommonModule,\r\n    CoreModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    BaseInputModule,\r\n  ],\r\n  exports: [InputComponent],\r\n})\r\nexport class InputModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BaseInputModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "InputComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LabelModule",
            "id": "module-LabelModule-77401668b4aa7f7a32c86daa2c47488c3be89a8e2bbbccad848d2bf74e885b64dbcc8c27d24c9260af84b527251f2f0e95a13250ff104a5fb6911877728002ce",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-relic/src/lib/label/label.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LabelComponent } from './label.component';\r\n\r\n@NgModule({\r\n  declarations: [LabelComponent],\r\n  imports: [CommonModule],\r\n  exports: [LabelComponent],\r\n})\r\nexport class LabelModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LabelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LabelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PaginationModule",
            "id": "module-PaginationModule-b345ab806c2f397c495d4ebf7dae680858fcb0558dfa8c15f27e6572ae2a3eb76c0d58eb3b1cfd0d65a01d5748ed6ecd1fe0c12c706d4b9766aaab9e7986583d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-relic/src/lib/pagination/pagination.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PaginationComponent } from './pagination.component';\r\nimport { ButtonModule } from '../button';\r\n\r\n@NgModule({\r\n  declarations: [PaginationComponent],\r\n  imports: [CommonModule, ButtonModule],\r\n  exports: [PaginationComponent],\r\n})\r\nexport class PaginationModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PaginationComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PlaceholderModule",
            "id": "module-PlaceholderModule-c03034f5ca8992b75dcc13fb95968dec9f561040653735d9ee57289dbd7c8611a2ccefe8726853b524b35c0f2f2a46babf70effbcae9f51aeadfed43463007dd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-relic/src/lib/placeholder/placeholder.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PlaceholderComponent } from './placeholder.component';\r\n\r\n@NgModule({\r\n  declarations: [PlaceholderComponent],\r\n  imports: [CommonModule],\r\n  exports: [PlaceholderComponent],\r\n})\r\nexport class PlaceholderModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PlaceholderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PlaceholderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SelectModule",
            "id": "module-SelectModule-64622808834ba95a79a8d9bb182e3403cc933ebb3b1ffd4fab6d3aad4b5794253194539188d510c9e9723762d179bc49e87df6b8bfd33302673cbff8060627e9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-relic/src/lib/select/select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SelectComponent } from './select/select.component';\r\nimport { SelectItemComponent } from './select-item/select-item.component';\r\nimport { PlaceholderModule } from '../placeholder';\r\nimport { BaseInputModule } from '../base-input';\r\nimport { ButtonModule } from '../button';\r\nimport { TagModule } from '../tag';\r\n\r\n@NgModule({\r\n  declarations: [SelectComponent, SelectItemComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ScrollingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    PlaceholderModule,\r\n    BaseInputModule,\r\n    ButtonModule,\r\n    TagModule,\r\n  ],\r\n  exports: [SelectComponent],\r\n})\r\nexport class SelectModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "SelectItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BaseInputModule"
                        },
                        {
                            "name": "ButtonModule"
                        },
                        {
                            "name": "PlaceholderModule"
                        },
                        {
                            "name": "TagModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TableModule",
            "id": "module-TableModule-1020cccd786e2d645633e839f147988504c7cafcbb6e1081087d2120a8bd441e7ee005fe2dd38accb09b5fa97403d6bc5764be2df832dd1a981a841d21dbec70",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-relic/src/lib/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TableComponent } from './table.component';\r\nimport { TableRowDirective } from './table-row.directive';\r\nimport { PaginationModule } from '../pagination/pagination.module';\r\n\r\n@NgModule({\r\n  declarations: [TableComponent, TableRowDirective],\r\n  imports: [CommonModule, PaginationModule],\r\n  exports: [TableComponent, TableRowDirective],\r\n})\r\nexport class TableModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableRowDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PaginationModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableRowDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TagModule",
            "id": "module-TagModule-a8b51f982f5ce7d42d01e633b167fdfa5c65b39385f54222eb216aa1e112f5e666272c5791ab3a46a1fb0227cd7d2dbd317448879f5022400a5ba7d54f1f6663",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-relic/src/lib/tag/tag.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TagComponent } from './tag.component';\r\n\r\n@NgModule({\r\n  declarations: [TagComponent],\r\n  imports: [CommonModule],\r\n  exports: [TagComponent],\r\n})\r\nexport class TagModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TagComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TagComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TooltipModule",
            "id": "module-TooltipModule-f845db8afe838af2b1a087ec9366da3bd71f827b306ac211c89dba8056dce35ae690793f554724a770eb2c1f5f0219024f9f08f70062e2ebe91d37839594dbbe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-relic/src/lib/tooltip/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TooltipComponent } from './tooltip.component';\r\n\r\n@NgModule({\r\n  declarations: [TooltipComponent],\r\n  imports: [CommonModule],\r\n  exports: [TooltipComponent],\r\n})\r\nexport class TooltipModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TooltipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TooltipComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    paginator: false,\r\n    data: generateRandomData(10) as any[],\r\n    options: {\r\n      columns: {\r\n        firstName: {\r\n          title: 'First name',\r\n          width: '100px',\r\n          align: 'left',\r\n        },\r\n        lastName: {\r\n          title: 'Last name',\r\n          align: 'left',\r\n          width: '100px',\r\n        },\r\n        age: {\r\n          title: 'Age',\r\n        },\r\n        city: {\r\n          title: 'City',\r\n        },\r\n      },\r\n      body: {\r\n        firstName: {\r\n          align: 'left',\r\n        },\r\n        lastName: {\r\n          align: 'left',\r\n        },\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "CustomColumns",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    limit: 5,\r\n    paginator: true,\r\n    data: generateRandomData(20) as any[],\r\n    options: {\r\n      columns: {\r\n        firstName: {\r\n          title: 'First name',\r\n          width: '100px',\r\n          align: 'left',\r\n        },\r\n        lastName: {\r\n          title: 'Last name',\r\n          align: 'left',\r\n          width: '100px',\r\n        },\r\n        age: {\r\n          title: 'Age',\r\n        },\r\n        city: {\r\n          title: 'City',\r\n        },\r\n        dateOfBirth: {\r\n          title: 'Date',\r\n        },\r\n        actions: {\r\n          title: 'Actions',\r\n        },\r\n      },\r\n      body: {\r\n        firstName: {\r\n          align: 'left',\r\n        },\r\n        lastName: {\r\n          align: 'left',\r\n        },\r\n      },\r\n    },\r\n  },\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props,\r\n      decorators: [\r\n        moduleMetadata({\r\n          declarations: [TableComponent],\r\n          imports: [CommonModule, TableModule, PaginationModule, ButtonModule],\r\n        }),\r\n      ],\r\n      template: `\r\n         <ngx-table ${argsToTemplate(args)}>\r\n           <ng-template appTableRow=\"dateOfBirth\" let-row>\r\n             {{row.dateOfBirth | date}}\r\n           </ng-template>\r\n           <ng-template appTableRow=\"actions\" let-row>\r\n            <ngx-button icon=\"edit\" [outline]=\"true\" />\r\n            <ngx-button class=\"ml-1\" icon=\"delete\" color=\"danger\" />\r\n           </ng-template>\r\n        </ngx-table>\r\n              `,\r\n    };\r\n  },\r\n}"
            },
            {
                "name": "Danger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    outline: false,\n    color: 'danger',\n  },\n}"
            },
            {
                "name": "DateFormControl",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/datepicker/datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    placeholder: 'Ingresa una fecha',\r\n    label: 'Fecha de nacimiento',\r\n    required: true,\r\n    errorText: 'Required field',\r\n  },\r\n}"
            },
            {
                "name": "datepicker",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/datepicker/datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<DatepickerModule>",
                "defaultValue": "{\r\n  title: 'Forms/Datepicker',\r\n  component: DatepickerComponent,\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [DatepickerComponent],\r\n      imports: [\r\n        CommonModule,\r\n        CoreModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        BaseInputModule,\r\n        PlaceholderModule,\r\n        ButtonModule,\r\n      ],\r\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n      providers: [\r\n        {\r\n          provide: NG_VALUE_ACCESSOR,\r\n          useExisting: forwardRef(() => DatepickerComponent),\r\n          multi: true,\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n\r\n    return {\r\n      props: {\r\n        ...props,\r\n        form: new FormBuilder().group({\r\n          date: ['', [Validators.required]],\r\n        }),\r\n      },\r\n      template: `\r\n          <form style=\"height: 350px;\" [formGroup]=\"form\">\r\n              <ngx-datepicker\r\n                  formControlName=\"date\"\r\n                  ${argsToTemplate(args)}\r\n                  />\r\n              <br />\r\n              <br />\r\n              {{input}}   \r\n          </form>\r\n              `,\r\n    };\r\n  },\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n}"
            },
            {
                "name": "EmailValidation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    placeholder: 'Type an email',\r\n    label: 'Email',\r\n    required: true,\r\n    disabled: false,\r\n    errorText: 'Invalid email',\r\n    helperText: 'Type an existent email',\r\n  },\r\n}"
            },
            {
                "name": "input",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InputModule>",
                "defaultValue": "{\r\n  title: 'Forms/Input',\r\n  component: InputComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [InputComponent],\r\n      imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        BaseInputModule,\r\n      ],\r\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n      providers: [\r\n        {\r\n          provide: NG_VALUE_ACCESSOR,\r\n          useExisting: forwardRef(() => InputComponent),\r\n          multi: true,\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props: {\r\n        ...props,\r\n        form: new FormBuilder().group({\r\n          email: ['', [Validators.required, Validators.email]],\r\n        }),\r\n      },\r\n      template: `\r\n        <form [formGroup]=\"form\">\r\n            <ngx-input\r\n                formControlName=\"email\"\r\n                [required]=\"required\"\r\n                [label]=\"label\"\r\n                [placeholder]=\"placeholder\"\r\n                [type]=\"type\"\r\n                [errorText]=\"errorText\"\r\n                [helperText]=\"helperText\"\r\n                />\r\n            <br />\r\n            <br />\r\n            {{input}}   \r\n        </form>\r\n            `,\r\n    };\r\n  },\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n}"
            },
            {
                "name": "input",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/select/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<SelectModule>",
                "defaultValue": "{\r\n  title: 'Forms/Select',\r\n  component: SelectComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    placeholder: {\r\n      control: 'text',\r\n    },\r\n    label: {\r\n      control: 'text',\r\n    },\r\n    errorText: {\r\n      control: 'text',\r\n    },\r\n    helperText: {\r\n      control: 'text',\r\n    },\r\n    required: {\r\n      control: 'boolean',\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n    },\r\n    type: {\r\n      control: 'select',\r\n      options: ['text', 'email', 'number', 'phone'],\r\n    },\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [SelectComponent, SelectItemComponent],\r\n      imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        ScrollingModule,\r\n        BaseInputModule,\r\n        ButtonModule,\r\n        PlaceholderModule,\r\n        TagModule,\r\n      ],\r\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n      providers: [\r\n        {\r\n          provide: NG_VALUE_ACCESSOR,\r\n          useExisting: forwardRef(() => SelectComponent),\r\n          multi: true,\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n\r\n    return {\r\n      props: {\r\n        ...props,\r\n        permissions: [\r\n          {\r\n            id: 1,\r\n            name: 'Admin',\r\n          },\r\n          {\r\n            id: 2,\r\n            name: 'Comercial',\r\n          },\r\n          {\r\n            id: 3,\r\n            name: 'Mesa de gestion',\r\n          },\r\n        ],\r\n        form: new FormBuilder().group({\r\n          select: ['', [Validators.required]],\r\n        }),\r\n      },\r\n      template: `\r\n        <form style=\"height: 350px;\" [formGroup]=\"form\">\r\n            <ngx-select\r\n              ${argsToTemplate(args)}\r\n              [options]=\"permissions\" \r\n              formControlName=\"select\"\r\n              labelKey=\"name\"\r\n              valueKey=\"id\"\r\n            />\r\n            <br />\r\n            <br />\r\n            {{input}}   \r\n        </form>\r\n            `,\r\n    };\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonModule>",
                "defaultValue": "{\n  title: 'Display/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    outline: {\n      control: 'boolean',\n    },\n    color: {\n      control: 'select',\n      options: ['primary', 'danger', 'success'],\n    },\n    disabled: {\n      control: 'boolean',\n    },\n    icon: {\n      control: 'text',\n    },\n  },\n  render: (args) => {\n    const { ...props } = args;\n    return {\n      props,\n      template: `<ngx-button [outline]=\"outline\" [color]=\"color\" [disabled]=\"disabled\" [icon]=\"icon\" [plain]=\"plain\">Click me!</ngx-button>`,\n    };\n  },\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\n}"
            },
            {
                "name": "Outline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    outline: true,\n    color: 'danger',\n  },\n}"
            },
            {
                "name": "Pagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    limit: 5,\r\n    paginator: true,\r\n    data: generateRandomData(20) as any[],\r\n    options: {\r\n      columns: {\r\n        firstName: {\r\n          title: 'First name',\r\n          width: '100px',\r\n          align: 'left',\r\n        },\r\n        lastName: {\r\n          title: 'Last name',\r\n          align: 'left',\r\n          width: '100px',\r\n        },\r\n        age: {\r\n          title: 'Age',\r\n        },\r\n        city: {\r\n          title: 'City',\r\n        },\r\n      },\r\n      body: {\r\n        firstName: {\r\n          align: 'left',\r\n        },\r\n        lastName: {\r\n          align: 'left',\r\n        },\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Placeholder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/select/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    placeholder: 'Select one or more options',\r\n    label: 'Permissions',\r\n    multiple: true,\r\n    required: true,\r\n    disabled: false,\r\n    errorText: 'This field is required',\r\n  },\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n  parameters: {\r\n    previewTabs: {\r\n      'storybook/docs/panel': { hidden: true },\r\n    },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    outline: false,\n    disabled: false,\n    color: 'primary',\n    icon: 'people',\n    plain: false,\n  },\n}"
            },
            {
                "name": "Required",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/label/label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    disabled: false,\r\n    required: true,\r\n  },\r\n}"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    outline: false,\n    color: 'success',\n  },\n}"
            },
            {
                "name": "table",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TableModule>",
                "defaultValue": "{\r\n  title: 'Data/Table',\r\n  component: TableComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [TableComponent, TableRowDirective],\r\n      imports: [CommonModule, PaginationModule, ButtonModule],\r\n    }),\r\n  ],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props,\r\n      template: `\r\n         <ngx-table ${argsToTemplate(args)}>\r\n        </ngx-table>\r\n              `,\r\n    };\r\n  },\r\n}"
            },
            {
                "name": "tag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/label/label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<LabelModule>",
                "defaultValue": "{\r\n  title: 'Display/Label',\r\n  component: LabelComponent,\r\n  tags: ['autodocs'],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props,\r\n      template: `<ngx-label [required]=\"required\" [disabled]=\"disabled\">First name</ngx-label>`,\r\n    };\r\n  },\r\n\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n}"
            },
            {
                "name": "tag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/tag/tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TagModule>",
                "defaultValue": "{\r\n  title: 'Display/Tag',\r\n  component: TagComponent,\r\n  tags: ['autodocs'],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props,\r\n      template: `<ngx-tag [close]=\"close\" [state]=\"state\" [outline]=\"outline\">Tag</ngx-tag>\r\n\r\n      `,\r\n    };\r\n  },\r\n\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n}"
            },
            {
                "name": "TagGroup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/tag/tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    close: true,\r\n    state: 'info',\r\n    icon: 'location_city',\r\n  },\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props,\r\n      template: `<ngx-tag ${argsToTemplate(args)}>Bogotá</ngx-tag>\r\n      <ngx-tag ${argsToTemplate(args)} class=\"ml-1\">Medellin</ngx-tag>\r\n      <ngx-tag ${argsToTemplate(args)} class=\"ml-1\">Cali</ngx-tag>\r\n      `,\r\n    };\r\n  },\r\n}"
            },
            {
                "name": "tooltip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TooltipModule>",
                "defaultValue": "{\r\n  title: 'Display/Tooltip',\r\n  component: TooltipComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [TooltipComponent],\r\n      imports: [CommonModule, ButtonModule],\r\n    }),\r\n  ],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props,\r\n      template: `<div style=\"display: flex; justify-content: center; align-items: center; height: 300px\">\r\n        <ngx-tooltip ${argsToTemplate(args)}>\r\n          <ngx-button content>Create</ngx-button>\r\n          <span>Create action tooltip!</span>\r\n        </ngx-tooltip>\r\n      </div>\r\n      `,\r\n    };\r\n  },\r\n\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n}"
            },
            {
                "name": "TooltipExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-relic/src/lib/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    width: 224,\r\n    position: 'top',\r\n  },\r\n}"
            }
        ],
        "functions": [
            {
                "name": "generateRandomData",
                "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "count",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Data[]",
                "jsdoctags": [
                    {
                        "name": "count",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomDate",
                "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "start",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "end",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "start",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "end",
                        "type": "Date",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomElement",
                "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "array",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "array",
                        "type": "Array",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getRandomInt",
                "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "min",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "min",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "max",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ButtonColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"danger\" | \"success\"",
                "file": "projects/ngx-relic/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ButtonColor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"danger\" | \"success\"",
                "file": "projects/ngx-relic/src/lib/core/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "CellAlign",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"left\" | \"center\" | \"right\"",
                "file": "projects/ngx-relic/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Color",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"danger\" | \"slate\" | \"neutral\"",
                "file": "projects/ngx-relic/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Color",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"danger\" | \"slate\" | \"neutral\"",
                "file": "projects/ngx-relic/src/lib/core/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Data",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "HeaderStyles",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ngx-relic/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "OnChange",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ngx-relic/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "OnChange",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ngx-relic/src/lib/core/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "OnChangeSelectFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ngx-relic/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "OnChangeSelectFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ngx-relic/src/lib/core/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "OnTouched",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ngx-relic/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "OnTouched",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/ngx-relic/src/lib/core/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 184
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "projects/ngx-relic/src/lib/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DatepickerComponent>",
                "file": "projects/ngx-relic/src/lib/datepicker/datepicker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InputComponent>",
                "file": "projects/ngx-relic/src/lib/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LabelComponent>",
                "file": "projects/ngx-relic/src/lib/label/label.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<SelectComponent<any, any>>",
                "file": "projects/ngx-relic/src/lib/select/select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TableComponent<any[]>>",
                "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TagComponent>",
                "file": "projects/ngx-relic/src/lib/tag/tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TooltipComponent>",
                "file": "projects/ngx-relic/src/lib/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TableOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/ngx-relic/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            },
            {
                "name": "TagSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"medium\" | \"large\"",
                "file": "projects/ngx-relic/src/lib/types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ngx-relic/src/lib/table/table.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    paginator: false,\r\n    data: generateRandomData(10) as any[],\r\n    options: {\r\n      columns: {\r\n        firstName: {\r\n          title: 'First name',\r\n          width: '100px',\r\n          align: 'left',\r\n        },\r\n        lastName: {\r\n          title: 'Last name',\r\n          align: 'left',\r\n          width: '100px',\r\n        },\r\n        age: {\r\n          title: 'Age',\r\n        },\r\n        city: {\r\n          title: 'City',\r\n        },\r\n      },\r\n      body: {\r\n        firstName: {\r\n          align: 'left',\r\n        },\r\n        lastName: {\r\n          align: 'left',\r\n        },\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "CustomColumns",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    limit: 5,\r\n    paginator: true,\r\n    data: generateRandomData(20) as any[],\r\n    options: {\r\n      columns: {\r\n        firstName: {\r\n          title: 'First name',\r\n          width: '100px',\r\n          align: 'left',\r\n        },\r\n        lastName: {\r\n          title: 'Last name',\r\n          align: 'left',\r\n          width: '100px',\r\n        },\r\n        age: {\r\n          title: 'Age',\r\n        },\r\n        city: {\r\n          title: 'City',\r\n        },\r\n        dateOfBirth: {\r\n          title: 'Date',\r\n        },\r\n        actions: {\r\n          title: 'Actions',\r\n        },\r\n      },\r\n      body: {\r\n        firstName: {\r\n          align: 'left',\r\n        },\r\n        lastName: {\r\n          align: 'left',\r\n        },\r\n      },\r\n    },\r\n  },\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props,\r\n      decorators: [\r\n        moduleMetadata({\r\n          declarations: [TableComponent],\r\n          imports: [CommonModule, TableModule, PaginationModule, ButtonModule],\r\n        }),\r\n      ],\r\n      template: `\r\n         <ngx-table ${argsToTemplate(args)}>\r\n           <ng-template appTableRow=\"dateOfBirth\" let-row>\r\n             {{row.dateOfBirth | date}}\r\n           </ng-template>\r\n           <ng-template appTableRow=\"actions\" let-row>\r\n            <ngx-button icon=\"edit\" [outline]=\"true\" />\r\n            <ngx-button class=\"ml-1\" icon=\"delete\" color=\"danger\" />\r\n           </ng-template>\r\n        </ngx-table>\r\n              `,\r\n    };\r\n  },\r\n}"
                },
                {
                    "name": "Pagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    limit: 5,\r\n    paginator: true,\r\n    data: generateRandomData(20) as any[],\r\n    options: {\r\n      columns: {\r\n        firstName: {\r\n          title: 'First name',\r\n          width: '100px',\r\n          align: 'left',\r\n        },\r\n        lastName: {\r\n          title: 'Last name',\r\n          align: 'left',\r\n          width: '100px',\r\n        },\r\n        age: {\r\n          title: 'Age',\r\n        },\r\n        city: {\r\n          title: 'City',\r\n        },\r\n      },\r\n      body: {\r\n        firstName: {\r\n          align: 'left',\r\n        },\r\n        lastName: {\r\n          align: 'left',\r\n        },\r\n      },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "table",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TableModule>",
                    "defaultValue": "{\r\n  title: 'Data/Table',\r\n  component: TableComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [TableComponent, TableRowDirective],\r\n      imports: [CommonModule, PaginationModule, ButtonModule],\r\n    }),\r\n  ],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props,\r\n      template: `\r\n         <ngx-table ${argsToTemplate(args)}>\r\n        </ngx-table>\r\n              `,\r\n    };\r\n  },\r\n}"
                }
            ],
            "projects/ngx-relic/src/lib/button/button.stories.ts": [
                {
                    "name": "Danger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    outline: false,\n    color: 'danger',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonModule>",
                    "defaultValue": "{\n  title: 'Display/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    outline: {\n      control: 'boolean',\n    },\n    color: {\n      control: 'select',\n      options: ['primary', 'danger', 'success'],\n    },\n    disabled: {\n      control: 'boolean',\n    },\n    icon: {\n      control: 'text',\n    },\n  },\n  render: (args) => {\n    const { ...props } = args;\n    return {\n      props,\n      template: `<ngx-button [outline]=\"outline\" [color]=\"color\" [disabled]=\"disabled\" [icon]=\"icon\" [plain]=\"plain\">Click me!</ngx-button>`,\n    };\n  },\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\n}"
                },
                {
                    "name": "Outline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    outline: true,\n    color: 'danger',\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    outline: false,\n    disabled: false,\n    color: 'primary',\n    icon: 'people',\n    plain: false,\n  },\n}"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    outline: false,\n    color: 'success',\n  },\n}"
                }
            ],
            "projects/ngx-relic/src/lib/datepicker/datepicker.stories.ts": [
                {
                    "name": "DateFormControl",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/datepicker/datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    placeholder: 'Ingresa una fecha',\r\n    label: 'Fecha de nacimiento',\r\n    required: true,\r\n    errorText: 'Required field',\r\n  },\r\n}"
                },
                {
                    "name": "datepicker",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/datepicker/datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<DatepickerModule>",
                    "defaultValue": "{\r\n  title: 'Forms/Datepicker',\r\n  component: DatepickerComponent,\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [DatepickerComponent],\r\n      imports: [\r\n        CommonModule,\r\n        CoreModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        BaseInputModule,\r\n        PlaceholderModule,\r\n        ButtonModule,\r\n      ],\r\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n      providers: [\r\n        {\r\n          provide: NG_VALUE_ACCESSOR,\r\n          useExisting: forwardRef(() => DatepickerComponent),\r\n          multi: true,\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n\r\n    return {\r\n      props: {\r\n        ...props,\r\n        form: new FormBuilder().group({\r\n          date: ['', [Validators.required]],\r\n        }),\r\n      },\r\n      template: `\r\n          <form style=\"height: 350px;\" [formGroup]=\"form\">\r\n              <ngx-datepicker\r\n                  formControlName=\"date\"\r\n                  ${argsToTemplate(args)}\r\n                  />\r\n              <br />\r\n              <br />\r\n              {{input}}   \r\n          </form>\r\n              `,\r\n    };\r\n  },\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n}"
                }
            ],
            "projects/ngx-relic/src/lib/input/input.stories.ts": [
                {
                    "name": "EmailValidation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    placeholder: 'Type an email',\r\n    label: 'Email',\r\n    required: true,\r\n    disabled: false,\r\n    errorText: 'Invalid email',\r\n    helperText: 'Type an existent email',\r\n  },\r\n}"
                },
                {
                    "name": "input",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InputModule>",
                    "defaultValue": "{\r\n  title: 'Forms/Input',\r\n  component: InputComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [InputComponent],\r\n      imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        BaseInputModule,\r\n      ],\r\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n      providers: [\r\n        {\r\n          provide: NG_VALUE_ACCESSOR,\r\n          useExisting: forwardRef(() => InputComponent),\r\n          multi: true,\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props: {\r\n        ...props,\r\n        form: new FormBuilder().group({\r\n          email: ['', [Validators.required, Validators.email]],\r\n        }),\r\n      },\r\n      template: `\r\n        <form [formGroup]=\"form\">\r\n            <ngx-input\r\n                formControlName=\"email\"\r\n                [required]=\"required\"\r\n                [label]=\"label\"\r\n                [placeholder]=\"placeholder\"\r\n                [type]=\"type\"\r\n                [errorText]=\"errorText\"\r\n                [helperText]=\"helperText\"\r\n                />\r\n            <br />\r\n            <br />\r\n            {{input}}   \r\n        </form>\r\n            `,\r\n    };\r\n  },\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n}"
                }
            ],
            "projects/ngx-relic/src/lib/select/select.stories.ts": [
                {
                    "name": "input",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/select/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<SelectModule>",
                    "defaultValue": "{\r\n  title: 'Forms/Select',\r\n  component: SelectComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    placeholder: {\r\n      control: 'text',\r\n    },\r\n    label: {\r\n      control: 'text',\r\n    },\r\n    errorText: {\r\n      control: 'text',\r\n    },\r\n    helperText: {\r\n      control: 'text',\r\n    },\r\n    required: {\r\n      control: 'boolean',\r\n    },\r\n    disabled: {\r\n      control: 'boolean',\r\n    },\r\n    type: {\r\n      control: 'select',\r\n      options: ['text', 'email', 'number', 'phone'],\r\n    },\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [SelectComponent, SelectItemComponent],\r\n      imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        ScrollingModule,\r\n        BaseInputModule,\r\n        ButtonModule,\r\n        PlaceholderModule,\r\n        TagModule,\r\n      ],\r\n      schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n      providers: [\r\n        {\r\n          provide: NG_VALUE_ACCESSOR,\r\n          useExisting: forwardRef(() => SelectComponent),\r\n          multi: true,\r\n        },\r\n      ],\r\n    }),\r\n  ],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n\r\n    return {\r\n      props: {\r\n        ...props,\r\n        permissions: [\r\n          {\r\n            id: 1,\r\n            name: 'Admin',\r\n          },\r\n          {\r\n            id: 2,\r\n            name: 'Comercial',\r\n          },\r\n          {\r\n            id: 3,\r\n            name: 'Mesa de gestion',\r\n          },\r\n        ],\r\n        form: new FormBuilder().group({\r\n          select: ['', [Validators.required]],\r\n        }),\r\n      },\r\n      template: `\r\n        <form style=\"height: 350px;\" [formGroup]=\"form\">\r\n            <ngx-select\r\n              ${argsToTemplate(args)}\r\n              [options]=\"permissions\" \r\n              formControlName=\"select\"\r\n              labelKey=\"name\"\r\n              valueKey=\"id\"\r\n            />\r\n            <br />\r\n            <br />\r\n            {{input}}   \r\n        </form>\r\n            `,\r\n    };\r\n  },\r\n}"
                },
                {
                    "name": "Placeholder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/select/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    placeholder: 'Select one or more options',\r\n    label: 'Permissions',\r\n    multiple: true,\r\n    required: true,\r\n    disabled: false,\r\n    errorText: 'This field is required',\r\n  },\r\n}"
                }
            ],
            "projects/ngx-relic/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n  parameters: {\r\n    previewTabs: {\r\n      'storybook/docs/panel': { hidden: true },\r\n    },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n  tags: ['autodocs'],\r\n}"
                }
            ],
            "projects/ngx-relic/src/lib/label/label.stories.ts": [
                {
                    "name": "Required",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/label/label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    disabled: false,\r\n    required: true,\r\n  },\r\n}"
                },
                {
                    "name": "tag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/label/label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<LabelModule>",
                    "defaultValue": "{\r\n  title: 'Display/Label',\r\n  component: LabelComponent,\r\n  tags: ['autodocs'],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props,\r\n      template: `<ngx-label [required]=\"required\" [disabled]=\"disabled\">First name</ngx-label>`,\r\n    };\r\n  },\r\n\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n}"
                }
            ],
            "projects/ngx-relic/src/lib/tag/tag.stories.ts": [
                {
                    "name": "tag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/tag/tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TagModule>",
                    "defaultValue": "{\r\n  title: 'Display/Tag',\r\n  component: TagComponent,\r\n  tags: ['autodocs'],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props,\r\n      template: `<ngx-tag [close]=\"close\" [state]=\"state\" [outline]=\"outline\">Tag</ngx-tag>\r\n\r\n      `,\r\n    };\r\n  },\r\n\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n}"
                },
                {
                    "name": "TagGroup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/tag/tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    close: true,\r\n    state: 'info',\r\n    icon: 'location_city',\r\n  },\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props,\r\n      template: `<ngx-tag ${argsToTemplate(args)}>Bogotá</ngx-tag>\r\n      <ngx-tag ${argsToTemplate(args)} class=\"ml-1\">Medellin</ngx-tag>\r\n      <ngx-tag ${argsToTemplate(args)} class=\"ml-1\">Cali</ngx-tag>\r\n      `,\r\n    };\r\n  },\r\n}"
                }
            ],
            "projects/ngx-relic/src/lib/tooltip/tooltip.stories.ts": [
                {
                    "name": "tooltip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TooltipModule>",
                    "defaultValue": "{\r\n  title: 'Display/Tooltip',\r\n  component: TooltipComponent,\r\n  tags: ['autodocs'],\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [TooltipComponent],\r\n      imports: [CommonModule, ButtonModule],\r\n    }),\r\n  ],\r\n  render: (args) => {\r\n    const { ...props } = args;\r\n    return {\r\n      props,\r\n      template: `<div style=\"display: flex; justify-content: center; align-items: center; height: 300px\">\r\n        <ngx-tooltip ${argsToTemplate(args)}>\r\n          <ngx-button content>Create</ngx-button>\r\n          <span>Create action tooltip!</span>\r\n        </ngx-tooltip>\r\n      </div>\r\n      `,\r\n    };\r\n  },\r\n\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n}"
                },
                {
                    "name": "TooltipExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-relic/src/lib/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    width: 224,\r\n    position: 'top',\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "projects/ngx-relic/src/lib/table/table.stories.ts": [
                {
                    "name": "generateRandomData",
                    "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Data[]",
                    "jsdoctags": [
                        {
                            "name": "count",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomDate",
                    "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "start",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "end",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "start",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomElement",
                    "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "array",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "array",
                            "type": "Array",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomInt",
                    "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ngx-relic/src/lib/types.ts": [
                {
                    "name": "ButtonColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"danger\" | \"success\"",
                    "file": "projects/ngx-relic/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "CellAlign",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"left\" | \"center\" | \"right\"",
                    "file": "projects/ngx-relic/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Color",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"danger\" | \"slate\" | \"neutral\"",
                    "file": "projects/ngx-relic/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "HeaderStyles",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ngx-relic/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "OnChange",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ngx-relic/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "OnChangeSelectFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ngx-relic/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "OnTouched",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ngx-relic/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "TableOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ngx-relic/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "TagSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"medium\" | \"large\"",
                    "file": "projects/ngx-relic/src/lib/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "projects/ngx-relic/src/lib/core/types.ts": [
                {
                    "name": "ButtonColor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"danger\" | \"success\"",
                    "file": "projects/ngx-relic/src/lib/core/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Color",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"danger\" | \"slate\" | \"neutral\"",
                    "file": "projects/ngx-relic/src/lib/core/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "OnChange",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ngx-relic/src/lib/core/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "OnChangeSelectFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ngx-relic/src/lib/core/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                },
                {
                    "name": "OnTouched",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/ngx-relic/src/lib/core/types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 184
                }
            ],
            "projects/ngx-relic/src/lib/table/table.stories.ts": [
                {
                    "name": "Data",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                },
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TableComponent<any[]>>",
                    "file": "projects/ngx-relic/src/lib/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ngx-relic/src/lib/button/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "projects/ngx-relic/src/lib/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ngx-relic/src/lib/datepicker/datepicker.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DatepickerComponent>",
                    "file": "projects/ngx-relic/src/lib/datepicker/datepicker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ngx-relic/src/lib/input/input.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InputComponent>",
                    "file": "projects/ngx-relic/src/lib/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ngx-relic/src/lib/label/label.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LabelComponent>",
                    "file": "projects/ngx-relic/src/lib/label/label.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ngx-relic/src/lib/select/select.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<SelectComponent<any, any>>",
                    "file": "projects/ngx-relic/src/lib/select/select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ngx-relic/src/lib/tag/tag.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TagComponent>",
                    "file": "projects/ngx-relic/src/lib/tag/tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/ngx-relic/src/lib/tooltip/tooltip.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TooltipComponent>",
                    "file": "projects/ngx-relic/src/lib/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 16,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ngx-relic/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/base-input/base-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Danger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Outline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/core/cva.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CvaDirective",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/core/hidden.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HiddenDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/core/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Day",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/core/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/datepicker/datepicker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatepickerComponent",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/datepicker/datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DateFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/datepicker/datepicker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "datepicker",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 100,
                "coverageCount": "8/8",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmailValidation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "input",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/label/label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LabelComponent",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/label/label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Required",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/label/label.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/pagination/pagination.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/placeholder/placeholder.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlaceholderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/select/select-item/select-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "input",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Placeholder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/select/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 92,
                "coverageCount": "13/14",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/table/table-row.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TableRowDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateRandomData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getRandomInt",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomColumns",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "table",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/tag/tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagComponent",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/tag/tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/tag/tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TagGroup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tooltip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TooltipExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Day",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-relic/src/lib/types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}